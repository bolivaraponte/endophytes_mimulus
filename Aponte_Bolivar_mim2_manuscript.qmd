---
title: "[Working title]: Foliar fungal symbionts in sympatric yellow monkeyflowers along elevation gradients in the Sierra Nevada"
date: last-modified
date-format: "MMMM D, YYYY"
bibliography: references.bib
csl: apa.csl
author:
  - name: Bolívar Aponte Rolón
    orcid: 0000-0002-2544-4551
    email: baponterolo@tulane.edu
    corresponding: true
    affiliations: 
      - ref: tu
        name: Tulane University
        department: Ecology and Evolutionary Biology
        city: New Orleans
        state: LA
        country: US
        url: www.tulane.edu
  - name: Kathleen G. Ferris
    email: kferris@tulane.edu
    corresponding: false
    affiliations: 
      - ref: tu
  - name: Sunshine A. Van Bael
    orcid: 0000-0001-7317-3533
    email: svanbael@tulane.edu
    corresponding: false
    affiliation: 
      - ref: tu
      
affiliations:
  - id: tu
    name: Department of Ecology and Evolutionary Biology, Tulane University, 6823 St. Charles Avenue, New Orleans, LA 70118

filters:
  - authors-block

format:
  # pdf:
  #   documentclass: scrartcl
  #   include-in-header:
  #       text: '\usepackage{lineno}\linenumbers'
  #   linestretch: 2.0
  #   margin-left: 1in
  #   margin-right: 1in
  #   margin-top: 1in
  #   margin-bottom: 1in
  #   mainfont: TeX Gyre Termes #Alternative to Times New Roman
  #   sansfont: TeX Gyre Termes #Another option is Liberation Serif
  #   number-sections: true
  #   citation-package: biblatex
  #   #keep_tex: true
  #   keep_md: true
  docx:
    reference-doc: custom-reference-doc.docx
    number-sections: true
    tbl-colwidths: true
    #linestretch: 2.0
    citation-package: biblatex
crossref:
  custom:
    - kind: float
      key: suppfig
      latex-env: suppfig
      reference-prefix: Fig. S
      space-before-numbering: false
      latex-list-of-description: Supplementary Figure
    
editor: source
execute:
  echo: false
warning: false
---

## Keywords

# Abstract

# Introduction

<!-- My dissertation work has led me to ask the following: 1) **What leaf traits and corresponding host genetics (species) and phenotypic plasticity are associated with endophytes communities?**; 2) **How does elevation influence endophyte communities in monkeyflowers?**. These questions arise due to current scientific knowledge on how plants have evolved alongside fungi and what key evolutionary drivers might influence this interaction: *phenotypic plasticity*, an organism's ability to produce different physical traits when exposed to different conditions [@fuscoPhenotypicPlasticityDevelopment2010]; and *genetic variation*. Both processes are vital to the ability to adapt to a warming climate [@jumpRunningStandStill2005a]. Microbes might play an essential role in a plant's capacity to adapt to a changing climate. Previous studies have suggested that endophytes (i.e., fungi in plant leaves) can alter plant traits (phenotypic plasticity) under stressful conditions [@songAdvancesResearchEpichloe2016a]. -->

<!-- No previous studies have considered how phenotypic plasticity traits and local genetic adaptation influence endophyte communities within leaves and, in turn, how these might play a role in the development of such traits. An ideal model system to explore the interactions between endophytes and host genetics and phenotypes is the closely related yellow monkeyflowers in the *Mimulus guttatus* species complex is well-documented [@ferrisLeafShapeEvolution2015a]: *Mimulus guttatus*, *Mimulus laciniatus* and *Mimulus nudatus*. -->

<!-- In answering my main questions for this research project I aimed to create a detailed account of the endophyte communities present in *M. guttatus* and *M. laciniatus* along an environmental gradient (e.g., elevation) to capture variation in population habitat, genetics and phenotypes and their associated endophyte communities. Ultimately, shedding light on how local adaptations, phenotypic traits, and endophyte communities in the *M. guttatus* complex interact. -->

# Materials and Methods

## Sample Collection

We collected plant specimens populations of *M. guttatus*, *M. laciniatus*, and *M. nasutus* (syn. *Erythranthe guttata* , *Erythranthe laciniata*, and *Erythranthe nasuta*) across Stanislaus National Forest (SNF), Sierra National Forest (SINF) and Yosemite National Park (YNP), CA, USA. during We haphazardly selected sites close to the main roads based on the presence of a viable population of at least \~ 50 individuals per species. Samples collected from YNP were collected from non-wilderness areas on the side of the road. We determined population viability ensuring that they had individuals flowering or close to flowering stage. We collected between 6 - 12 individuals per species per site. We selected individuals that possessed healthy looking leaves, no visible signs of pathogen damage or senescence. At sites were two species were present we collected individuals that were at least \~ 25 meters apart. We collected sample specimens by carefully uprooting the plant and placing into individual plastic bags (e.g., Ziploc®) and preserving in an ice chest until return to the field laboratory at the UC Merced Yosemite Field Station, YNP, CA, USA. Plant specimens were processed within 8 hrs of collection.

## Leaf traits measurement

From each plant, we measured leaf traits: leaf thickness (LT), leaf punch strength (LPS), leaf mass per area (LMA), anthocyanin content index (ACI) which are known to be associated with FEF communities [@tellezTraits2022] as well as leaf lobe index (LBI) [@ferris2015]. We cleaned plants with tap water to remove all soil and debris remnants from the leaves and roots. We removed all healthy leaves (\~ 5 - 10) from the stems and took three measurements per trait from three haphazardly selected leaves from individual plants, with the exception of LBI, only one leaf per plant. We used a transparency film to hold the leaf in place and flatten, after which we took a digital photograph for analysis in ImageJ [v1.52r; @schneider2012]. To calculate the LBI, we followed [-@ferris2015]. Leaf lobing is calculated as the convex hull area minus the true leaf area divided by convex hull area. We measured ACI content with ACM-200plus (Opti-Sciences Inc. Hudson, New Hampshire, U.S.A.) on haphazardly selected locations of the leaf surface (working from the petiole out to the leaf tip) [@tellezTraits2022]. The ACM-200 calculates an ACI value from the ratio of % transmittance at 931 nm/% transmittance at 525 nm [@opti-sciencesinc], effectively accounting for leaf thickness. We measured LT (μm) with a Mitutoyo 7327 Micrometer Gauge (Mitutoyo, Takatsu-ku, Kawasaki, Japan) on haphazardly selected locations of the leaf lamina, taking care to avoid major and secondary veins. We used an Imada DST-11a digital force gauge (Imada Inc., Northbrook, IL, United States) to measure LPS, a measure of leaf toughness, on the lamina of each leaf selected, avoiding minor leaf veins when possible [@tellezTraits2022]. It functions by conducting punch-and-die tests with a sharp-edged cylindrical steel punch (2.0 mm diameter) and a steel die with a sharp-edged aperture of small clearance (0.05 mm). Once LPS was measured, we used a 4 mm diameter punch hole to puncture disks for LMA measurements. We collected one disk per leaf (see Supplementary material for details). The disk punches dried were shipped to Tulane University, New Orleans, LA, USA to dry at 60 ℃ for 48-72 hours before being weighed.

## Molecular Work

### Tissue preservation

Upon completion of the leaf traits measurements, we prepared and preserved samples at the UC Merced Yosemite Field Station. We started by removing the main vein and margins from photosynthetic tissue. The leaf lamina was haphazardly cut with a sterile blade into 2 mm wide strip in parallel to the main vein [@arnold2003; @tellezTraits2022; @higgins2014]. Leaf strips were then sterilized with sequential washes in 95% EtOH (10 s), 0.5% sodium hypochlorite (NaOCl) (60 s), and 70% EtOH (60 s) and air dried under sterile conditions. Due to the small size of monkeyflower plants, the maximum amount of leaf lamina was preserved in sterile 15 mL tubes with \~ 10 mL CTAB solution (1 M Tris–HCl pH 8, 5 M NaCl, 0.5 M EDTA, and 20 g CTAB). The leaf tissue in CTAB solution was used for amplicon sequencing (described in detail below). All leaf tissue handling was performed in a sterile environment with an alcohol burner lamp inside a portable biosafety cabinet. All surfaces were previously sterilized sequentially with 0.5% NaOCl, 95% EtOH, and 70% EtOH. We surface sterilized surfaces and instruments in between sample handling to prevent cross contamination.

### Amplicon sequencing

We stored leaf tissue in CTAB solution for 2 months at room temperature before extracting DNA at Tulane University. To prepare for sample DNA extraction procedure, we decontaminated all instruments, materials, and surfaces in biosafety cabinet with 0.5 % NaOCl, 70 % EtOH, and 95% EtOH, and subsequently treated with UV light for 30 minutes. We subsampled 0.2 - 0.3 g of leaf tissue from each sample and placed into a sterile 2 mL tubes containing an assortment of beads: 3.2 mm stainless steel beads (Next Advance, Cat# SSB32), 100 µL stainless steel bead blend, 0.9-2.0mm (NextAdvance, Cat# SSB14B) and 2-3 of the autoclaved 2 mm zirconium oxide beads (Next Advance, Cat# ZRoB20). The 2 mL tubes with beads were previously prepared. We then proceeded to lyophilize samples for 72 hours to fully remove CTAB content from tissue. After, we submerged the sample tubes in liquid nitrogen for 30 s and homogenized samples at 30 Hz for 3 minutes in a TissueLyser LT (QIAGEN, Valencia, CA, USA). We stored samples in 20 ℃ until DNA extraction procedure.

We used a DNA extraction protocol for high-molecular weight DNA extraction adapted from Russo et al., [-@russo2022]. Briefly, it is a CTAB:chloroform:isoamyl extraction combined with a solid-phase reversible immobilization (SPRI) bead step [@russo2022; @rohland2012; @liu2023]. Protocol modifications allowed us to optimize extractions for fungal DNA from preserved leaf tissue [see details in @aponterolon2023]. After all genomic DNA was extracted, we quantified the DNA using Quant-iT® dsDNA HS Assay kit with Qubit Flourometer (Thermo Fisher Scientific, Waltham, MA, USA., Cat# Q33120) and followed a two-step amplification approach described by [-@sarmiento2017] and [-@uren2017]. We used standard primers ITS1F [@gardes1993] and ITS2 [@inbook] modified with the Illumina TruSeq adaptor. The modified primers for the first PCR (adapter ligation and ITS1 amplification) were as follows: 5’ CACTCTTTCCCTACACGACGCTCTTCCGATCTCTTGGTCATTTAGAGGAAGTAA 3’ (forward) and 5’ GTGACTGGAGTTCAGACGTGTGCTCTTCCGATCTGCTGCGTTCTTCATCGATGC 3’ (reverse). Every sample was amplified in three parallel reactions at the annealing temperatures 52 ℃, 54 ℃, and 56 ℃ to amplify a wide range of fungal taxa and reduce amplification bias for short ITS sequences [@uren2017; @lumibao2018]. Each PCR (PCR1) reaction contained 2 µL of sample DNA template. We visualized PCR1 reactions with SYBR™ Safe DNA Gel Stain (Thermo Fisher Scientific, Waltham, MA, USA., Cat# S33102) on 2% agarose gel [@oita2021]. We combined 5 µL of amplicon product from parallel reactions in to a single tube per sample and purified using Sera-Mag™ SpeedBead Carboxylate-Modified Magnetic Particles (Hydrophobic) (Thermo Fisher Scientific, Waltham, MA, USA., Cat#09-981-123) prepared as per [-@rohland2012 and -@liu2023] and  used a ratio of 1.2x:1 with 80% EtOH following manufacturers instructions. We used 3 µL of PCR1 product from samples, DNA extraction controls, and PCR1 negative controls for a second PCR (PCR2) with barcoded adapters (IDT, Coralville, Iowa, USA). Each PCR2 reaction (total 30 µL) contained 1X Phusion Flash High Fidelity PCR Master Mix (Thermo Fisher Scientific, Waltham, MA, USA., Cat# F548L), 0.075 µM of barcoded primers (forward and reverse pooled at an initial concentration of 2 µM) and 0.20mg/mL of BSA (Thermo Fisher Scientific, Waltham, MA, USA., Cat# B14) following [-@sarmiento2017 and -@uren2017]. Before final pooling for sequencing, we purified and concentrated amplicons using SPRI beads to a total volume of 20 µL. We quantified PCR2 product with Quant-iT™ PicoGreen™ dsDNA Assay Kit (Thermo Fisher Scientific, Waltham, MA, USA., Cat# P7589) with the BioTek Synergy LX plate reader (Agilent, Santa Clara, CA) and combined equimolar amounts of libraries, including DNA extraction controls, PCR1, and PCR2 negative controls into a 10nM library pool. We did not detect any contamination visually or fluorometrically. Libraries were sequenced on the Illumina MiSeq platform with Reagent Kit v3 (2 \u00D7 300 bp) at Duke Genome Sequencing and Analysis Core Facility (Durham, NC, USA). Throughout all these steps, we used a separate set of sterile pipettes, tips, and equipment to reduce contamination in a designated PCR area to restrict contact with pre-PCR materials [@oita2021].

### Bioinformatic analyses

We assessed the quality of the reads using FastQc v0.12.1 [ v0.12.1; @andrews2010] and MultiQC [@ewels2016] tools. A total of 60,696,808 total ITS1 reads yielded from 343 (including 27 controls) libraries sequenced in two separate sequencing runs. The first sequencing event yielded 32,117,684 and the second 28,579,124 ITS1 reads. We tailored the open-source DADA2 [@callahan2016] bioinformatic pipeline for our data set. We filtered our reads for ambiguous calls before removing the adapters by using `filterAndTrim` function and argument `maxN = 0` from the `dada2` package [v1.28.0; @callahan2016] in *R* programming language [@rcoreteam2023]. We removed forward and reverse primer adapters (and their reverse compliments) and eliminated reads shorter than 20 bp using the `cutadapt` tool [v4.6, @martin2011]. Based on our initial quality assessment, both forward and reverse reads were of low quality, with base calls deteriorating after 100bp. We applied stringent filter and truncation parameters to ensure quality of reads when assigning taxonomy. We filtered and truncated reads based on maximum expected errors (maxEE) rather than read length as it provides a reliable quality filtering [@edgar2015]. For this we set set the arguments `trunQ = 2`, `maxEE = c(2,20)` for forward and reverse reads, and minimum read length of 50 bp with `minLen = 50` in the used the `filterAndTrim` function [@callahan2016]. These parameters eliminated 151 samples from our data set, all from our second sequencing event. After this filter, we dereplicated reads with the `derepFastq` function and merged pairs using `mergePairs` functions with an overlap of 20 bp, minimum. We then inferred composition of the samples with `dada` function, which applies the DADA algorithm [@callahan2016; @rosen2012]. We removed chimeras via the "consensus"method with the `removeBimeraDenovo` function and ultimately we used the `assignTaxonomy` function to assign taxonomy the amplicon sequence variants (ASV) referenced against the UNITE database [@abarenkov2023a]. After taxonomy assignment we used the `phyloseq` package [@mcmurdie2013] to create a phyloseq object for downstream analyses.

We used the `decontam` package [v1.20.0; @davis2018] to statistically determine which ASVs are likely contaminants based on their frequency in our samples and remove them using `prune_taxa` function from the `phyloseq` package [v1.44.0; @mcmurdie2013]. After which, we calculated the average read count found in DNA and PCR extraction controls, considered to be laboratory contaminants, and subtracted that from the samples' read counts. We then used custom scripts to remove any ASV that represented less than 0.1% of the abundance per sample on the assumption that it originates from contamination throughout handling of samples in the DNA and PCR processes. We removed singletons ASVs with the `prune_taxa` function [@mcmurdie2013]. All these steps were performed in *R* [v.4.3.2; @rcoreteam2023].

## Statistical Analyses

<!-- Once the bioinformatics for the subset data were completed, I performed a statistical technique called Principal Component Analysis (PCA). This help me understand patterns and relationships among leaf traits of host species (**Figure 1**). Additionally, I used a distance-based Redundancy Analysis (dbRDA) to statistically compare the endophyte community similarities within each yellow monkeyflower species per site. This method allowed me to further understand how host species leaf trait's influence the diversity, relative abundance, and richness of endophyte communities (**Figure 2**). -->

# Results

# Discussion

# Conclusion

# References

::: {#refs}
:::

# Figures

```{r, leaf_traits}
#| echo: false
#| eval: true
#| tidy: true

library("data.table")
library("ggplot2")
library("ggpubr")
library("ggfortify")
library("ggthemes")
library("ggtext")
library("ggiraphExtra")
library("wesanderson")
library("MetBrewer")

library("rstatix")
library("car")
library("nlme")

library("vegan")
library("phyloseq")
library("hillR")

path <-"/home/baponte/Boxx/Dissertation/Mimulus/Data/CH2/bioinformatics"
traits <- read.csv(file.path(path, "mim2_leaf_traits_field_survey.csv"))

#Elevation_m categories (meters)
breaks <- c(-Inf, 1219.2, 1828.495, Inf)
labels <- c("LOW", "MEDIUM", "HIGH")

#Leaf level data set
leaf_traits <-  traits |>
  slice(-c(959:973))|> #Removing control samples
  rename(LMA = LMA.mg., 
         LBI = Leaf_lobe_index,
         Toughness = Leaf_toughness,
         Thickness = Leaf_thickness) |> 
  select(!c(5,12:15, 23:25)) |>
  group_by(Site, Species, Unique_ID) |>
  fill(ImageJ_1, ImageJ_2, LBI, .direction = 'down') |>
  mutate(Species = as.factor(Species), 
         Site = as.factor(Site),
         Elevation_cat = cut(Elevation_m, 
                             breaks = breaks,
                             labels = labels)) |>
  relocate(Elevation_cat, .before = Elevation_m)|>
  as_tibble()

# Save file
#saveRDS(leaf_traits, file.path(path, "statistics/leaf_traits.rds"))
#write.csv(leaf_traits, file.path(path, "statistics/leaf_traits.csv"))

# Load file
leaf_traits <- readRDS(file.path(path, "statistics/leaf_traits.rds"))


#Plant level for ASV analyses
plant_traits <- leaf_traits |>
  relocate(Unique_ID, .before = Site) |>
  group_by(Unique_ID, Site, Species, Elevation_m, Elevation_cat, Longitude, Latitude)|>
  summarise(ACI = mean(ACI, na.rm = TRUE),
            Thickness = mean(Thickness, na.rm = TRUE),
            Toughness = mean(Toughness, na.rm =TRUE),
            LMA = mean(LMA, na.rm = TRUE),
            ImageJ_1 = mean(ImageJ_1, na.rm = TRUE),
            ImageJ_2 = mean(ImageJ_2, na.rm = TRUE),
            LBI = mean(LBI, na.rm = TRUE))

# Save file
#saveRDS(plant_traits, file.path(path, "statistics/plant_traits.rds"))
#write.csv(plant_traits, file.path(path, "statistics/plant_traits.csv"))

# Load file
plant_traits <- readRDS(file.path(path, "statistics/plant_traits.rds"))


#getting rownmes to filter
#names <- column_to_rownames(all_decontaminated, var = "X")
#samples <- rownames(names) #Using the colname to filter out 

# Leaft traits transformed
leaf_traits <- leaf_traits |>
  mutate(logLBI = log10(LBI),
         logACI = log10(ACI),
         logLT = log10(Thickness),
         logLPS = log10(Toughness),
         logLMA = log10(LMA))

#Removing species B
leaf_traits_noB <- leaf_traits |>
  filter(!Species == "B")

# Plant traits transformed
plant_traits <- plant_traits |>
  mutate(logLBI = log10(LBI),
         logACI = log10(ACI),
         logLT = log10(Thickness),
         logLPS = log10(Toughness),
         logLMA = log10(LMA))


## Phyloseq objects

#Phyloseq joins various objects that we have already prepare: taxonomic table, ASV table and our sample data.
#These are the data frames resulting from the phyloseq section in mim2_bioinformatics.qmd notebook

#Phyloseq object cleaned of singletons (231 ASVs)
ps_clean_3 <- readRDS(file.path(path, "taxonomy/ASV_8450_assigned_nonsingletons.rds"))
ps_clean_3_df  <- read.csv(file.path(path, "taxonomy/ASV_8450_assigned_nonsingletons.csv"))

#Relative abundance phyloseq
rel_abund_ps_clean <- readRDS(file.path(path, "taxonomy/ASV_8450_relabun_nonsingletons.rds"))
rel_ps_clean_df <- read.csv(file.path(path, "taxonomy/ASV_8450_relabun_nonsingletons.csv"))

# Leaf traits with community data ####
plant_traits <- ps_clean_3 |> #Estimating community richness and shannon diversity from phyloseq object
  estimate_richness(split = TRUE, measures = c("Observed","Shannon")) |>
  rownames_to_column() |>
  rename(Unique_ID = rowname) |>
  right_join(plant_traits, by = "Unique_ID") |>
  relocate(Observed, Shannon, .after = logLMA)
 

```

## Figure 1

```{r, lma}
#| echo: false
#| eval: true
#| tidy: true
#| fig-width: 5
#| fig-height: 5
#| label: lma_violin
#| fig-cap: "Violin plots of Leaf Mass per Area (LMA) by species and elevation category."

#ggpubr package used for comparisons tests
lma_compare_means <- compare_means(logLMA ~ Species,
         data = leaf_traits_noB,
         group.by = "Elevation_cat",
         method = "wilcox.test",
         p.adjust.method = "BH",
  paired = FALSE,
  alternative = "two.sided", 
  mu = 0, 
  var.equal = FALSE,
  conf.level = 0.95)

#lma_compare_means
#Report with `compare_means` because it is easier to plot with `ggpubr` package.

#Error bars for plots 
errbar_lims <- group_by(leaf_traits_noB, Site) |> 
              summarize(mean = mean(logLMA), se = sd(logLMA)/sqrt(n()), 
                        upper = mean+(2*se), lower = mean-(2*se))
#Comparisons
my_comparisons <- list(c("N", "L"), c("N", "G"), c("L", "G"))

#By Site
lma <- ggplot(leaf_traits_noB, aes(y = logLMA, x = Species)) +
  geom_violin(aes(fill = Species)) +
  geom_crossbar(stat = "summary",
                fun = mean,
                fun.max = mean,
                fun.min = mean,
                fatten = 1.5, width = 0.8) +
  geom_point(color = "black", alpha = 0.2,
             size = 1.7, 
             position = position_jitter(w = 0.05))  +
  scale_fill_manual(labels =c('*M. laciniatus*', '*M. nasutus*', '*M. guttatus*'),
                    values = met.brewer("Archambault", n = 4, type = "discrete")) +
  scale_color_manual(aes(color = "black")) +
  #scale_color_manual(labels=c(''*M. laciniatus*', '*M. nasutus*', '*M. guttatus*'),values= met.brewer("Archambault", n = 4, type = "discrete")) +
  theme_classic(base_size = 12) +
  theme(legend.title = element_text(face = "bold"),
        panel.border = element_rect(linetype = "blank", fill = NA),
        legend.text = element_markdown(size = 12), #Make legend text italic
        # axis.text.x = element_text(face="italic", 
        #                             size = 10,  
        #                             hjust = 1,
        #                             angle = 30),
        axis.text.x = element_blank()) +
  labs(y = "log10[Leaf Mass per Area (LMA) (mg/mm)]", x = "") +
  #scale_x_discrete(labels = c('M. laciniatus', 'M. nasutus', 'M. guttatus')) +
  stat_compare_means(comparisons = my_comparisons,
                     method = "wilcox.test",
                     #label.y = c(0.4, 0.6, 1),
                     label = "p.signif") +
  facet_wrap(~Elevation_cat)

lma

#ggsave(filename = file.path(path, "figures/lma_violin.png"), plot = lma, dpi=300, units=c("mm"), width=300, height=150)
```

# Figure 2

```{r, aci}
#| echo: false
#| eval: true
#| tidy: true
#| fig-width: 5
#| fig-height: 5
#| label: aci_violin
#| fig-cap: "Violin plots of Anthocyanin Content Index (ACI) by species and elevation category."

#ggpubr package used for comparisons tests
aci_compare_means <- compare_means(logACI ~ Species,
         data = leaf_traits_noB,
         group.by = "Elevation_cat",
         method = "wilcox.test",
         p.adjust.method = "BH",
  paired = FALSE,
  alternative = "two.sided", 
  mu = 0, 
  var.equal = FALSE,
  conf.level = 0.95)

#aci_compare_means
#Roughly the same outcome as pairwise_t_test.

#Report with `compare_means` because it is easier to plot with `ggpubr` package.
errbar_lims <- group_by(leaf_traits_noB, Species) |> 
              summarize(mean = mean(logACI), se = sd(logACI)/sqrt(n()), 
                        upper = mean + (2*se), lower = mean - (2*se))

#Comparisons
my_comparisons <- list(c("N", "L"), c("N", "G"), c("L", "G"))


aci <- ggplot(leaf_traits_noB, aes(y = logACI, x = Species)) +
  geom_violin(aes(fill = Species)) +
  geom_crossbar(stat="summary",
                fun = mean,
                fun.max = mean,
                fun.min = mean,
                fatten = 1.5, width = 0.8) +
  geom_point(color="black", alpha = 0.2,
             size=1.7, 
             position = position_jitter(w = 0.05))  +
  scale_fill_manual(labels=c('*M. laciniatus*', '*M. nasutus*', '*M. guttatus*'),
                    values= met.brewer("Archambault", n = 4, type = "discrete")) +
  scale_color_manual(aes(color = "black")) +
  #scale_color_manual(labels=c(''*M. laciniatus*', '*M. nasutus*', '*M. guttatus*'),values= met.brewer("Archambault", n = 4, type = "discrete")) +
  theme_classic(base_size = 12) +
  theme(legend.title = element_text(face = "bold"),
        panel.border = element_rect(linetype = "blank", fill = NA),
        legend.text = element_markdown(size = 12), #Make legend text italic
        # axis.text.x = element_text(face="italic", 
        #                             size = 14,  
        #                             hjust = 1,
        #                             angle = 30)) +
        axis.text.x = element_blank()) +
  labs(y = expression(paste("log[ACI (% ", italic("A") [lambda]," at 931 nm / % ", italic("A") [lambda]," at 530 nm)]")), x = "") +
  #scale_x_discrete(labels = c('M. laciniatus', 'M. nasutus', 'M. guttatus')) +
  stat_compare_means(comparisons = my_comparisons,
                     method = "wilcox.test",
                     #label.y = c(0.4, 0.6, 1),
                     label = "p.signif") +
  facet_wrap(~Elevation_cat)
  #guides(color = "none")  +      #To turn off color legend
  #guides(fill = "none") + #To turn off fill legend
  #guides(shape = "none") + #To turn off shape legend
   
aci

#ggsave(filename = file.path(path, "figures/aci_violin.png"), plot = aci, dpi=300, units=c("mm"), width=300, height=150)
```

## Figure 3

```{r, lbi}
#| echo: false
#| eval: true
#| tidy: true
#| fig-width: 5
#| fig-height: 5
#| label: lbi_violin
#| fig-cap: "Violin plots of Leaf Lobe Index (LBI) by species and elevation category."

#ggpubr package used for comparisons tests
lbi_compare_means <- compare_means(logLBI ~ Species,
         data = leaf_traits_noB,
         group.by = "Elevation_cat",
         method = "wilcox.test",
         p.adjust.method = "BH",
  paired = FALSE,
  alternative = "two.sided", 
  mu = 0, 
  var.equal = FALSE,
  conf.level = 0.95)

#lbi_compare_means


#Roughly the same outcome as pairwise_t_test.

#Report with `compare_means` because it is easier to plot with `ggpubr` package.
errbar_lims <- group_by(leaf_traits_noB, Species) |> 
              summarize(mean = mean(logLBI), se = sd(logLBI)/sqrt(n()), 
                        upper = mean + (2*se), lower = mean - (2*se))

#Comparisons
my_comparisons <- list(c("N", "L"), c("N", "G"), c("L", "G"))

lbi <- ggplot(leaf_traits_noB, aes(y = logLBI, x = Species)) +
  geom_violin(aes(fill = Species)) +
  #geom_boxplot(width = 0.3, color = "grey30", alpha = 0.2) +
  geom_crossbar(stat = "summary",
                fun = mean,
                fun.max = mean,
                fun.min = mean,
                fatten = 1.5, width = 0.8) +
  geom_point(color = "black", alpha = 0.2,
             size = 1.7,
             position = position_jitter(w = 0.05))  +
  scale_fill_manual(labels =c('*M. laciniatus*', '*M. nasutus*', '*M. guttatus*'),
                    values = met.brewer("Archambault", n = 4, type = "discrete")) +
  scale_color_manual(aes(color = "black")) +
  #scale_color_manual(labels=c(''*M. laciniatus*', '*M. nasutus*', '*M. guttatus*'),values= met.brewer("Archambault", n = 4, type = "discrete")) +
  theme_classic(base_size = 12) +
  theme(legend.title = element_text(face = "bold"),
        panel.border = element_rect(linetype = "blank", fill = NA),
        legend.text = element_markdown(size = 12), #Make legend text italic
        axis.text.x = element_text(face="italic", 
                                    size = 14,  
                                    hjust = 1,
                                    angle = 30)) +
  labs(y = "log10[LBI (convex_hull - true_area]/convex_hull)]", x = "") +
  #scale_x_discrete(labels = c('M. laciniatus', 'M. nasutus', 'M. guttatus')) +
  stat_compare_means(comparisons = my_comparisons,
                     method = "wilcox.test",
                     #label.y = c(0.4, 0.6, 1),
                     label = "p.signif") +
   facet_wrap(~Elevation_cat)
 
  #guides(color = "none")  +      #To turn off color legend
  #guides(fill = "none") + #To turn off fill legend
  #guides(shape = "none") +#To turn off shape legend
  
lbi

#ggsave(filename = file.path(path, "figures/lbi_violin.png"), plot = lbi, dpi=300, units=c("mm"), width=300, height=150)
```

## Figure 4

```{r, lps}
#| echo: false
#| eval: true
#| tidy: true
#| fig-width: 5
#| fig-height: 5
#| label: lps_violin
#| fig-cap: "Violin plots of leaf toughness by species and elevation category."

#ggpubr package used for comparisons tests
lps_compare_means <- compare_means(logLPS ~ Species,
         data = leaf_traits_noB,
         group.by = "Elevation_cat",
         method = "wilcox.test",
         p.adjust.method = "BH",
  paired = FALSE,
  alternative = "two.sided", 
  mu = 0, 
  var.equal = FALSE,
  conf.level = 0.95)

#lps_compare_means

#Report with `compare_means` because it is easier to plot with `ggpubr` package.
errbar_lims <- group_by(leaf_traits_noB, Species) |> 
              summarize(mean = mean(logLPS), se = sd(logLPS)/sqrt(n()), 
                        upper = mean + (2*se), lower = mean - (2*se))

#Comparisons
my_comparisons <- list(c("N", "L"), c("N", "G"), c("L", "G"))

lps <- ggplot(leaf_traits_noB, aes(y = logLPS, x = Species)) +
  geom_violin(aes(fill = Species)) +
  #geom_boxplot(width = 0.3, color = "grey30", alpha = 0.2) +
  geom_crossbar(stat = "summary",
                fun = mean,
                fun.max = mean,
                fun.min = mean,
                fatten = 1.5, width = 0.8) +
  geom_point(color = "black", alpha = 0.2,
             size = 1.7,
             position = position_jitter(w = 0.05))  +
  scale_fill_manual(labels =c('*M. laciniatus*', '*M. nasutus*', '*M. guttatus*'),
                    values = met.brewer("Archambault", n = 4, type = "discrete")) +
  scale_color_manual(aes(color = "black")) +
  #scale_color_manual(labels=c(''*M. laciniatus*', '*M. nasutus*', '*M. guttatus*'),values= met.brewer("Archambault", n = 4, type = "discrete")) +
  theme_classic(base_size = 12) +
  theme(legend.title = element_text(face = "bold"),
        panel.border = element_rect(linetype = "blank", fill = NA),
        legend.text = element_markdown(size = 12), #Make legend text italic
        axis.text.x = element_text(face="italic", 
                                    size = 14,  
                                    hjust = 1,
                                    angle = 30)) +
  labs(y = expression(paste("Leaf punch strength (N mm","^-1)")), x = "") +
  #scale_x_discrete(labels = c('M. laciniatus', 'M. nasutus', 'M. guttatus')) +
  stat_compare_means(comparisons = my_comparisons,
                     method = "wilcox.test",
                     #label.y = c(0.4, 0.6, 1),
                     label = "p.signif") +
   facet_wrap(~Elevation_cat)
 
  #guides(color = "none")  +      #To turn off color legend
  #guides(fill = "none") + #To turn off fill legend
  #guides(shape = "none") +#To turn off shape legend
  
lps

#ggsave(filename = file.path(path, "figures/lps_violin.png"), plot = lps, dpi=300, units=c("mm"), width=300, height=150)
```

## Figure 5

```{r, lt_violin}
#| echo: false
#| eval: true
#| tidy: true
#| fig-width: 5
#| fig-height: 5
#| label: lt_violin
#| fig-cap: "Violin plots of leaf thickness by species and elevation category."

#ggpubr package used for comparisons tests
lt_compare_means <- compare_means(logLT ~ Species,
         data = leaf_traits_noB,
         group.by = "Elevation_cat",
         method = "wilcox.test",
         p.adjust.method = "BH",
  paired = FALSE,
  alternative = "two.sided", 
  mu = 0, 
  var.equal = FALSE,
  conf.level = 0.95)

lt_compare_means
#Roughly the same outcome as pairwise_t_test.

#Report with `compare_means` because it is easier to plot with `ggpubr` package.
errbar_lims <- group_by(leaf_traits_noB, Species) |> 
              summarize(mean = mean(logLT), se = sd(logLT)/sqrt(n()), 
                        upper = mean + (2*se), lower = mean - (2*se))

#Comparisons
my_comparisons <- list(c("N", "L"), c("N", "G"), c("L", "G"))

lt <- ggplot(leaf_traits_noB, aes(y= logLT, x = Species)) +
  geom_violin(aes(fill = Species)) +
  #geom_boxplot(width = 0.3, color = "grey30", alpha = 0.2) +
  geom_crossbar(stat = "summary",
                fun = mean,
                fun.max = mean,
                fun.min = mean,
                fatten = 1.5, width = 0.8) +
  geom_point(color = "black", alpha = 0.2,
             size = 1.7,
             position = position_jitter(w = 0.05))  +
  scale_fill_manual(labels =c('*M. laciniatus*', '*M. nasutus*', '*M. guttatus*'),
                    values = met.brewer("Archambault", n = 4, type = "discrete")) +
  scale_color_manual(aes(color = "black")) +
  #scale_color_manual(labels=c(''*M. laciniatus*', '*M. nasutus*', '*M. guttatus*'),values= met.brewer("Archambault", n = 4, type = "discrete")) +
  theme_classic(base_size = 12) +
  theme(legend.title = element_text(face = "bold"),
        panel.border = element_rect(linetype = "blank", fill = NA),
        legend.text = element_markdown(size = 12), #Make legend text italic
        axis.text.x = element_text(face="italic", 
                                    size = 14,  
                                    hjust = 1,
                                    angle = 30)) +
  labs(y = expression(paste("Leaf thickness (",mu,"m)")), x = "") +
  scale_x_discrete(labels = c('M. laciniatus', 'M. nasutus', 'M. guttatus')) +
  stat_compare_means(comparisons = my_comparisons,
                     method = "wilcox.test",
                     #label.y = c(0.4, 0.6, 1),
                     label = "p.signif") +
   facet_wrap(~Elevation_cat)
 
  #guides(color = "none")  +      #To turn off color legend
  #guides(fill = "none") + #To turn off fill legend
  #guides(shape = "none") +#To turn off shape legend

lt

#ggsave(filename = file.path(path, "figures/lt_violin.png"), plot = lt, dpi=300, units=c("mm"), width=300, height=150)
```

## Figure 6

```{r, elevation}
#| echo: false
#| eval: true
#| tidy: true
#| fig-width: 5
#| fig-height: 5
#| label: elevation
#| fig-cap: "Scatter plots of Shannon Diversity Index by elevation category."


# Formatting formula for p value
format.p <- function(p, precision = 0.001) {
  digits <- -log(precision, base = 10)
  p <- formatC(p, format = 'f', digits = digits)
  if (p < 0.001) {
    p = paste0('< ', precision)}
  if (p >= 0.001) {
    p = paste0('= ', p)    }
  sub("0", "0", p)
}


#Legend title
legend_title <- "Species"

# Shannon diversity

# Linear model summary
summary(lm(Shannon ~ Elevation_m, data = plant_traits))
elev_div_p <- format.p(cor.test(plant_traits$Shannon, plant_traits$Elevation_m)$p.value) # This is just to make the p-value nicer. 


elev_diversity <- ggplot(data = plant_traits  |>
  filter(!Species == "B"), 
  aes(x = Elevation_m, y = Shannon, color = Species)) +
   geom_jitter(aes(color = plant_traits$Species[plant_traits$Species != "B"]), size = 3, alpha = 0.7) + 
   geom_smooth(method = lm, se = F) + 
   # stat_regline_equation(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~'))) 
   geom_smooth(method = lm, se = T, level = 0.95, na.rm = F, color = "black") + 
   stat_regline_equation(label.y = 3, label.x = 1000, 
                         aes(label = paste(..eq.label.., sprintf("italic('p')~'%s'", elev_div_p), 
                                          sep = "~~~~")), size = rel(4), color = "black") +
   stat_regline_equation(label.y = 2.7, label.x = 1900, 
                          aes(label = ..adj.rr.label.., ), size = rel(4), color = "black") + 
   scale_fill_manual(labels = c("*M. laciniatus*","*M. nasutus*", "*M. guttatus*"), 
                     values = met.brewer("Archambault", n = 4, type = "discrete", direction = c(1))) + 
   scale_color_manual(legend_title, labels = c("*M. laciniatus*", "*M. nasutus*", "*M. guttatus*"), 
                      values = met.brewer("Archambault", n = 4, type = "discrete", direction = c(1))) + 
   labs(y = "Shannon diversity index", x = "Elevation_m (m.a.s.l.)", col = "") + 
   theme_classic(base_size = 12) +
   theme(legend.title = element_text(face = "bold"),
        panel.border = element_rect(linetype = "blank", fill = NA),
        legend.text = element_markdown(size = 12), #Make legend text italic
        axis.text.x = element_text(size = 12),
        axis.title.x = element_text(size = 14))

elev_diversity

#ggsave(filename = file.path(path, "figures/shannon_elevation.png"), plot = elev_diversity, dpi=300, units=c("mm"), width=250, height=150)
```

## Figure 7

```{r, richness}
#| echo: false
#| eval: true
#| tidy: true
#| fig-width: 5
#| fig-height: 5
#| label: richness
#| fig-cap: "Scatter plot of Shannon diversity by elevation."

#Linear model summary
summary(lm(Observed ~ Elevation_m, data = plant_traits))
richness_p <- format.p(cor.test(plant_traits$Observed, plant_traits$Elevation_m)$p.value) # This is just to make the p-value nicer. 


rich_diversity <- ggplot(data = plant_traits  |>
  filter(!Species == "B"), 
  aes(x = Elevation_m, y = Observed, color = Species)) +
   geom_jitter(aes(color = plant_traits$Species[plant_traits$Species != "B"]), size = 3, alpha = 0.7) + 
   geom_smooth(method = lm, se = F) + 
   # stat_regline_equation(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~'))) 
   geom_smooth(method = lm, se = T, level = 0.95, na.rm = F, color = "black") + 
   stat_regline_equation(label.y = 50, label.x = 1000, 
                         aes(label = paste(..eq.label.., sprintf("italic('p')~'%s'", richness_p), 
                                          sep = "~~~~")), size = rel(4), color = "black") +
  stat_regline_equation(label.y = 45, label.x = 1900, 
                          aes(label = ..adj.rr.label..), size = rel(4), color = "black") + 
   scale_fill_manual(labels = c("*M. laciniatus*","*M. nasutus*", "*M. guttatus*"), 
                     values = met.brewer("Archambault", n = 4, type = "discrete", direction = c(1))) + 
   scale_color_manual(legend_title, labels = c("*M. laciniatus*", "*M. nasutus*", "*M. guttatus*"), 
                      values = met.brewer("Archambault", n = 4, type = "discrete", direction = c(1))) + 
   labs(y = "Observed Richness", x = "Elevation_m (m.a.s.l.)", col = "") + 
   theme_classic(base_size = 12) +
   theme(legend.title = element_text(face = "bold"),
        panel.border = element_rect(linetype = "blank", fill = NA),
        legend.text = element_markdown(size = 12), #Make legend text italic
        axis.text.x = element_text(size = 12),
        axis.title.x = element_text(size = 14)) 
  # annotate(geom = "text", x = 2100, y = 2.5, label = "p = 0.03", color = "black")
#annotate(geom="text", x=2100, y=50, label="p = 0.06", color = "black")


rich_diversity


#ggsave(filename = file.path(path, "figures/richness_elevation.png"), plot = rdv, dpi=300, units=c("mm"), width=250, height=150)
```

## Figure 8

```{r, pca}

```

## Figure 9

```{r, barplot}
#| echo: false
#| eval: true
#| tidy: true
#| fig-width: 5
#| fig-height: 5
#| label: barplot
#| fig-cap: "Bar plot of relative abundance of fungal phyla by species and elevation category."
ps_melt <- psmelt(ps_clean_3) # Melting data to create accurate relative abunddance plot
p1 <- ggplot(ps_melt |>
  filter(!sample_Species == "B"), aes(x = sample_Species, y = Abundance)) +
  geom_bar(aes(fill = Phylum), stat="identity", position = "fill") +
  scale_fill_manual(labels=c('Ascomycota', 'Basidiomycota', 'Chytridiomycota', 'Fungi_ord_Incertae_sedis', 'Mortierellomycota', 'Olpidiomycota'),values= met.brewer("Lakota", n = , type = "discrete", override.order = TRUE)) +
  theme_bw(base_size = 14) +
  theme(panel.grid.major = element_line(colour = "grey90"),
        panel.grid.minor = element_line(colour = "grey90"),
        strip.background = element_rect(fill = "white"),
        strip.text.x = element_text(colour = "black", face = "bold"),
        legend.text = element_text(size = 12),
        panel.border = element_rect(linetype = "blank", fill = NA),
        axis.text.y = element_text(size = 12),
        axis.text.x = element_text(face="italic", 
                                    size = 14,  
                                    hjust = 1,
                                    angle = 30)) +
  scale_x_discrete(labels = c('M. laciniatus', 'M. nasutus', 'M. guttatus')) +
  labs(y = "Abundance", x = "", caption = "n = 160") +
  facet_grid(~Elevation_cat)

  
p1 
#ggsave(file.path(path, "figures/relabun_barplot.png") , plot = pp1, dpi=300, units=c("mm"), width=200, height=150)
```

## Figure 10

INSERT dbRDA HERE

## Figure 11

![Alpha diversity index by elevation category.](figures/shannon_evo2023.jpg){width="6" height="4"}

## Figure 12


```{r}
#| echo: false
#| eval: true
#| tidy: true
#| fig-width: 5
#| fig-height: 5
#| label: BETA_evo2023
#| 
my_comparisons3 <- list(c("LOW", "MEDIUM"), c("LOW", "HIGH"), c("MEDIUM", "HIGH"))

beta_diversity <- plot_richness(ps_clean_3, "Elevation_cat", color = "Elevation_cat",measures = "Shannon", scales="free")
beta_diversity
bbe <-  be +  geom_violin(aes(fill=Elevation_cat, color = Elevation_cat)) +
  geom_crossbar(stat="summary", fun = mean, fun.max = mean, fun.min = mean,  fatten = 2, width = 0.5, color="black") +
  geom_point(aes(shape =Species),color="black", alpha = 0.4,size=1.7, position = position_jitter(w=0.05)) +  scale_color_manual(labels=c('Low', 'Medium', 'High'),values= met.brewer("Lakota", n = 3, type = "discrete")) +
  scale_fill_manual(labels=c('Low', 'Medium', 'High'),values= met.brewer("Lakota", n = 3, type = "discrete")) +
  scale_shape_manual(values=c(15:18),labels=c('*M. laciniatus*', '*M. nasutus*', '*M. guttatus*')) +
  theme_bw() +
  theme(panel.grid.major = element_line(colour = "grey90")) +
  theme(panel.grid.minor = element_line(colour = "grey90")) +
  theme(strip.background = element_rect(fill = "white")) +
  theme(strip.text.x = element_text(colour = "black", face = "bold")) +
  theme(legend.title = element_text(face = "bold")) +
  theme(panel.border = element_rect(linetype = "blank", fill = NA)) +
  theme(legend.text = element_markdown()) +
  theme(axis.text.x = element_text(face="italic", size = 14)) +
  scale_x_discrete(labels = c('', '', '', '')) +
  stat_compare_means(comparisons = my_comparisons3,method = "t.test", label = "p.format") +
  labs(y = "Beta Diversity", x = "", caption = "n = 167") +theme(axis.title.x = element_text(size = 14))
bbe
p
ggsave(file.path(path, "Plots", "/BETA_evo2023.svg") , plot = bbe, dpi=300, units=c("mm"), width=200, height=150)

```

# Supplementary Material
