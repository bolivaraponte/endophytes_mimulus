---
title: "Mim2_Statistical_analyses"
author: "Bolívar Aponte Rolón"
date: "`r format(Sys.time(), '%B %d, %Y')`"
output: html_document
---

```{r setup}
knitr::opts_chunk$set(out.width ='70%', fig_align = 'center', echo = TRUE, collapse = TRUE, eval=FALSE)
```

##Potential Packages

```{r}
library("tidyverse")
library("data.table")
library("ggpubr")
library("ggfortify")
library("ggtext")
library("ggpmisc")
library("broom")
library("MetBrewer")
library("rstatix")

library("car")
library("nlme")

library("vegan")
library("hillR")
library("phyloseq")
library("metagMisc")
library("microbiome")
library("iNEXT")
library("geosphere")
library("indicspecies")

library("conflicted")
conflict_prefer("filter", "dplyr")
conflict_prefer("alpha", "ggplot2")
```

# File Path

```{r}
#| echo: false
#| eval: true
#| tidy: true
path <- "../mim2_bioinformatics" # Change accordingly
```

# Data sets

## Cleaning and Shaping

This section cleans and shapes the raw data into two main data frames: `leaf_traits` and `plant_traits`. The first has all data point for leaf trait measurements at the leaf level (raw) and the second one represents the average per plant while incorporating FEF community data. The FEF community data is only available for 160/320 samples. For the downstream analyses, we eliminated *M. bicolor* or species "B" in the data set. The removal of this is due to a small sample size for leaf trait measurements and even smaller for FEF community data (*n* = 3). The removal is not explicit in `plant_traits` it is only explicit in the subset `leaf_traits_noB` and latter on in the `asv_matrix` that gives way for community analyses in [Community Diversity]. We include a custom function for p-value formatting.

```{r, cleaning_chaping_data}
#| echo: false
#| eval: true
#| tidy: true

traits <- read.csv(file.path(path, "field_data/mim2_leaf_traits_field_survey.csv")) # Main raw data set

#Elevation_m categories (meters)
breaks <- c(-Inf, 1219.2, 1828.495, Inf)
labels <- c("LOW", "MID", "HIGH")

#Leaf level data set
leaf_traits <-  traits |>
  slice(-c(959:973))|> #Removing control samples
  filter(!Unique_ID == "TRTB_L001") |>#Removing misidentified sample
  rename(LMA = LMA.mg., 
         LBI = Leaf_lobe_index,
         LPS = Leaf_toughness,
         LT = Leaf_thickness) |> 
  select(!c(5,12:15, 23:25)) |>
  group_by(Site, Species, Unique_ID) |>
  fill(ImageJ_1, ImageJ_2, LBI, .direction = 'down') |>
  mutate(Species = as.factor(Species), 
         Site = as.factor(Site),
         Elevation_cat = cut(Elevation_m, 
                             breaks = breaks,
                             labels = labels)) |>
  relocate(Elevation_cat, .before = Elevation_m)|>
  as_tibble()

#Plant level for ASV analyses
plant_traits <- leaf_traits |>
  relocate(Unique_ID, .before = Site) |>
  group_by(Unique_ID, Site, Species, Elevation_m, Elevation_cat, Longitude, Latitude)|>
  summarise(ACI = mean(ACI, na.rm = TRUE),
            LT = mean(LT, na.rm = TRUE),
            LPS= mean(LPS, na.rm =TRUE),
            LMA = mean(LMA, na.rm = TRUE),
            ImageJ_1 = mean(ImageJ_1, na.rm = TRUE),
            ImageJ_2 = mean(ImageJ_2, na.rm = TRUE),
            LBI = mean(LBI, na.rm = TRUE))


#### Log transformation ####

# All variables are non-normal. We proceed with a log transformation of the data.
# See Descriptive Statistics section for reference on this decision. Leaf_trait_transformation block.
# Leaft traits transformed
leaf_traits <- leaf_traits |>
  mutate(logLBI = log10(LBI),
         logACI = log10(ACI),
         logLT = log10(LT),
         logLPS = log10(LPS),
         logLMA = log10(LMA))

#Removing species B
leaf_traits_noB <- leaf_traits |>
  filter(!Species == "B")

# Plant traits transformed
plant_traits <- plant_traits |>
  mutate(logLBI = log10(LBI),
         logACI = log10(ACI),
         logLT = log10(LT),
         logLPS = log10(LPS),
         logLMA = log10(LMA))


#### Phyloseq objects ####

#Phyloseq joins various objects that we have already prepare: taxonomic table, ASV table and our sample data. These are the data frames resulting from the phyloseq section in mim2_bioinformatics.qmd notebook.

# Load Phyloseq object cleaned of singletons (231 ASVs)
ps_clean_3 <- readRDS(file.path(path, "clean_data/taxonomy/ASV_8450_assigned_nonsingletons.rds"))
ps_clean_3_df  <- read.csv(file.path(path, "clean_data/taxonomy/ASV_8450_assigned_nonsingletons.csv"))

# Load Relative abundance phyloseq
rel_abund_ps_clean <- readRDS(file.path(path, "clean_data/taxonomy/ASV_8450_relabun_nonsingletons.rds"))
rel_ps_clean_df <- read.csv(file.path(path, "clean_data/taxonomy/ASV_8450_relabun_nonsingletons.csv"))


#### Leaf traits with community data ####

# Calculating Hill orders
plant_traits <- ps_clean_3 |> #Estimating community richness and shannon diversity from phyloseq object
  estimate_richness(split = TRUE, measures = c("Observed","Shannon", "Simpson")) |>
       #  Simpson = 1 / Simpson) |>
  mutate(hill_1 = exp(Shannon), #Observed column is equivalent to hill_0
         hill_2 = 1/(1 - Simpson)) |> #Simpson index is (1-D) and InvSimpson (1/D) which is equivalent to hill_2
  rownames_to_column() |>
  rename(Unique_ID = rowname) |>
  right_join(plant_traits, by = "Unique_ID") |>
  relocate(Observed, 
           Shannon, 
           Simpson, 
           hill_1,
           hill_2,
           .after = logLMA) |>
  rename(Simpson_1minusD = Simpson)
# See https://www.jak.bio/posts/me/20211227_simpson/simpson_diversity.html for a good explanation of Simpson's diversity index.

# Save file
# Leaf traits
#saveRDS(leaf_traits, file.path(path, "clean_data/statistics/leaf_traits.rds"))
#write.csv(leaf_traits, file.path(path, "clean_data/statistics/leaf_traits.csv"))

# Plant traits with community data
#saveRDS(plant_traits, file.path(path, "clean_data/statistics/plant_traits.rds"))
#write.csv(plant_traits, file.path(path, "clean_data/statistics/plant_traits.csv"))

#### Load master files ####
leaf_traits <- readRDS(file.path(path, "clean_data/statistics/leaf_traits.rds"))
plant_traits <- readRDS(file.path(path, "clean_data/statistics/plant_traits.rds"))

# Samples with species to subset/filter matrices downstream
# M. laciniatus
lac_names <- plant_traits |>
  slice(1:160) |> # Only selecting observations with ASV data 
  filter(Species == "L") |>
  pull(Unique_ID) 

# M. guttatus
gut_names <- plant_traits |> 
  slice(1:160) |> # Only selecting observations with ASV data 
  filter(Species == "G") |>
  pull(Unique_ID)

# M. nasutus
nas_names <- plant_traits |> 
  slice(1:160) |> # Only selecting observations with ASV data 
  filter(Species == "N") |>
  pull(Unique_ID)

#####################################################
# Formatting formula for p value
format.p <- function(p, precision = .001) {
  digits <- -log(precision, base = 10)
  p <- formatC(p, format = 'f', digits = digits)
  if (p < .001) {
    p = paste0('< ', precision)}
  if (p >= .001) {
    p = paste0('= ', p)    }
  sub("", "", p)
}
######################################################

# Comparisons
my_comparisons <- list(c("N", "L"), c("N", "G"), c("L", "G"))
my_comparisons3 <- list(c("LOW", "MID"), c("LOW", "HIGH"), c("MID", "HIGH"))
```

##Descriptive stats

```{r, Leaf_traits_basics}
#| echo: false
#| eval: true
#| tidy: true

#LBI
hist(leaf_traits$LBI) #Skewed to the left, non-normal distribution of LBI data
mean(leaf_traits$LBI, na.rm = TRUE)
max(leaf_traits$LBI, na.rm = TRUE)
min(leaf_traits$LBI, na.rm = TRUE)
sd(leaf_traits$LBI, na.rm = TRUE)

qqPlot(leaf_traits$LBI) #Does not seem normal at all.
hist(rnorm(n = length(leaf_traits$LBI))) #For comparison: normal distribution based on random permutation of my data.
shapiro.test(leaf_traits$LBI) #Since p-value is less than 0.05 this means the residuals from the LBI data are not normally distributed. Data needs transfromation.
fligner.test(logLBI ~ Site, data = leaf_traits) #Homogeneity of variances test. p-value < 0.05, variances are not equal.

#LMA
hist(leaf_traits$LMA)
mean(leaf_traits$LMA, na.rm = TRUE)
max(leaf_traits$LMA, na.rm = TRUE)
min(leaf_traits$LMA, na.rm = TRUE)
sd(leaf_traits$LMA, na.rm = TRUE)

qqPlot(leaf_traits$LMA) #Remove outiler 4.4mg
#hist(rnorm(n = length(leaf_traits$LMA))) #For comparison: normal distribution based on random permutation of my data.
shapiro.test(leaf_traits$LMA) #Since p-value is less than 0.05 this means the residuals from the LMA data are not normally distributed.
fligner.test(LMA ~ Site, data = leaf_traits) #Homogeneity of variances test. p-value < 0.05, variances are not equal.

#Toughness
hist(leaf_traits$LPS[leaf_traits$LPS < 4]) # Remove two outliers by using cut-off at 4.
mean(leaf_traits$LPS[leaf_traits$LPS < 4], na.rm = TRUE)
max(leaf_traits$LPS[leaf_traits$LPS < 4], na.rm = TRUE)
min(leaf_traits$LPS[leaf_traits$LPS < 4], na.rm = TRUE)
sd(leaf_traits$LPS[leaf_traits$LPS < 4], na.rm = TRUE)

qqPlot(leaf_traits$LPS[leaf_traits$LPS < 4]) 
hist(rnorm(n = length(leaf_traits$LPS[leaf_traits$LPS < 4]))) #For comparison: normal distribution based on random permutation of my data.
shapiro.test(leaf_traits$LPS[leaf_traits$LPS < 4]) #Since p-value is less than 0.05 this means the residuals from the LPS data are not normally distributed. Data needs transformation.
fligner.test(LPS ~ Site, data = leaf_traits) #Homogeneity of variances test. p-value < 0.05, variances are not equal.

#Thickness
hist(leaf_traits$LT)
mean(leaf_traits$LT, na.rm = TRUE)
max(leaf_traits$LT, na.rm = TRUE)
min(leaf_traits$LT, na.rm = TRUE)
sd(leaf_traits$LT, na.rm = TRUE)

qqPlot(leaf_traits$LT) # Skewed to the right. 
hist(rnorm(n = length(leaf_traits$LT))) #For comparison: normal distribution based on random permutation of my data.
shapiro.test(leaf_traits$LT) #Since p-value is less than 0.05 this means the residuals from the LT data are not normally distributed. Data needs transformation.
fligner.test(LT ~ Site, data = leaf_traits) #Homogeneity of variances test. p-value < 0.05, variances are not equal.

#ACI
hist(leaf_traits$ACI[leaf_traits$ACI < 20]) #Setting cut-off at 20 to remove outliers. 
mean(leaf_traits$ACI[leaf_traits$ACI <20], na.rm = TRUE)
max(leaf_traits$ACI, na.rm = TRUE)
min(leaf_traits$ACI, na.rm = TRUE)
sd(leaf_traits$ACI[leaf_traits$ACI <20], na.rm = TRUE)

qqPlot(leaf_traits$ACI[leaf_traits$ACI <20]) # Remove outliers, it's is skewed to the right. 
hist(rnorm(n = length(leaf_traits$ACI))) #For comparison: normal distribution based on random permutation of my data.
shapiro.test(leaf_traits$ACI[leaf_traits$ACI <20]) #Since p-value is less than 0.05 this means the residuals from the Thickness data are not normally distributed. Data needs transformation.
fligner.test(ACI ~ Site, data = leaf_traits) #Homogeneity of variances test. p-value < 0.05, variances are not equal.

#Elevation_m
hist(leaf_traits$Elevation_m)
mean(leaf_traits$Elevation_m, na.rm = TRUE)
max(leaf_traits$Elevation_m, na.rm = TRUE)
min(leaf_traits$Elevation_m, na.rm = TRUE)
sd(leaf_traits$Elevation_m, na.rm = TRUE)

qqPlot(leaf_traits$Elevation_m) 
hist(rnorm(n = length(leaf_traits$Elevation_m))) #For comparison: normal distribution based on random permutation of my data.
shapiro.test(leaf_traits$Elevation_m) #Since p-value is less than 0.05 this means the residuals from the Thickness data are not normally distributed. Data needs transformation.
fligner.test(Elevation_m ~ Site, data = leaf_traits) #Homogeneity of variances test. p-value < 0.05, variances are not equal.
```

All leaf traits and elevation are not normally distributed. This requires transformation for further analysis. We will proceed with a log transformation of the data.

```{r, Leaf_traits_transformation}

# Leaf traits transformed
# leaf_traits <- leaf_traits |>
#   mutate(logLBI = log10(LBI),
#          logACI = log10(ACI),
#          logLT = log10(Thickness),
#          logLPS = log10(Toughness),
#          logLMA = log10(LMA))
# 
# #Removing species B
# leaf_traits_noB <- leaf_traits |>
#   filter(!Species == "B")
# 
# # Plant traits transformed
# plant_traits <- plant_traits |>
#   mutate(logLBI = log10(LBI),
#          logACI = log10(ACI),
#          logLT = log10(Thickness),
#          logLPS = log10(Toughness),
#          logLMA = log10(LMA))
```

We are not omiting samples with NAs because some have the complete data for some leaf traits and not for others. We will omit samples with NAs for the Fungal analyses.

## Post data transformations

```{r, post_transformation}
#| echo: false
#| eval: true
#| tidy: true

#LBI
hist(leaf_traits$LBI, col = "steelblue", main = "Non-normal distribution")
hist(na.omit(leaf_traits$logLBI), col='coral2', main='Log Transformed')
qqPlot(leaf_traits$logLBI) #a BETTER, but not normal distribution
shapiro.test(leaf_traits$logLBI)

#LMA
hist(leaf_traits$LMA, col = "steelblue", main = "Non-normal distribution")
hist(na.omit(leaf_traits$logLMA), col='coral2', main='Log Transformed')
qqPlot(na.omit(leaf_traits$logLMA)) 
shapiro.test(na.omit(leaf_traits$logLMA))

#Toughness
hist(leaf_traits$Toughness[leaf_traits$Toughness < 4], col = "steelblue", main = "Non-normal distribution")
hist(na.omit(leaf_traits$logLPS[leaf_traits$logLPS < 0.5]), col='coral2', main='Log Transformed')
qqPlot(leaf_traits$logLPS[leaf_traits$logLPS < 0.5]) # Excludinfg the outliers, this transformation looks good
shapiro.test(leaf_traits$logLPS) # It still does not meet normality assumptions.

#Thickness
hist(leaf_traits$Thickness, col = "steelblue", main = "Non-normal distribution")
hist(na.omit(leaf_traits$logLT), col='coral2', main='Log Transformed')
qqPlot(leaf_traits$logLT)
shapiro.test(leaf_traits$logLT) #Close to normality, but not quite there.

#ACI
hist(leaf_traits$ACI, col = "steelblue", main = "Non-normal distribution")
hist(na.omit(leaf_traits$logACI), col='coral2', main='Log Transformed')
qqPlot(leaf_traits$logACI) 
shapiro.test(leaf_traits$logACI) #Another transformation that does not meet normality assumptions.
```

The log transformations improve the normality of the data, but it does not meet the assumptions for normality. We will proceed with the analyses using the log transformed data. We will use non-parametric tests for the analyses.

## Non-parametric tests

```{r, non_parametric}
#M1 <- lme(logLBI ~ , method = "REML", data = imagej1) # this is not the best given that I don't have continuous data.

#Kruskal-Wallis
#Because the data does not meet normality assumptions after transformation, I decisded to stick to a non-parametric test like Kruskal-Wallis.
# LBI by Site
print(kruskal.test(logLBI ~ Site, 
                   data = leaf_traits,
                   na.action = na.omit))

# LBI by Elevation_m
print(kruskal.test(logLBI ~ Elevation_m, 
             data = leaf_traits,
             na.action = na.omit))

# LMA by Site
print(kruskal.test(logLMA ~ Site, 
                   data = leaf_traits,
                   na.action = na.omit))

# LMA by Elevation_m
print(kruskal.test(logLMA ~ Elevation_m, 
                   data = leaf_traits,
                   na.action = na.omit))

# Toughness by Site
print(kruskal.test(logLPS ~ Site, 
                   data = leaf_traits,
                   na.action = na.omit))

# Toughness by Elevation_m
print(kruskal.test(logLPS ~ Elevation_m, 
                   data = leaf_traits,
                   na.action = na.omit))

# Thickness by Site
print(kruskal.test(logLT ~ Site, 
                   data = leaf_traits,
                   na.action = na.omit))

# Thickness by Elevation_m
print(kruskal.test(logLT ~ Elevation_m, 
                   data = leaf_traits,
                   na.action = na.omit))

# ACI by Site
print(kruskal.test(logACI ~ Site, 
                   data = leaf_traits,
                   na.action = na.omit))

# ACI by Elevation_m
print(kruskal.test(logACI ~ Elevation_m, 
                   data = leaf_traits,
                   na.action = na.omit))



#Post-Hoc tests
TukeyHSD(two.way, which = "Species")
pairwise.wilcox.test(imagej1$logLBI, g = imagej1$Site)
pairwise.wilcox.test(imagej1$logLBI, g = imagej1$Elevation_m)
pairwise.wilcox.test(imagej1$logLBI, g = imagej1$Genotype)

?pairwise.wilcox.test()

```

# Figures

### Leaf traits

#### LMA

```{r, lma_elevation}
#| echo: false
#| eval: true
#| tidy: true
#| label: lma_elevation

########## Labels ###########
#Legend title label
legend_title <- "Species"
# Species labels
labels_list <- c("M. laciniatus", "M. nasutus", "M. guttatus")
names(labels_list) <- c("L", "N", "G")
#############################

#ggpubr package used for comparisons tests
lma_compare_means <- compare_means(logLMA ~ Species,
         data = leaf_traits_noB,
         group.by = "Elevation_cat",
         method = "wilcox.test",
         p.adjust.method = "BH",
  paired = FALSE,
  alternative = "two.sided", 
  mu = 0, 
  var.equal = FALSE,
  conf.level = 0.95)

#lma_compare_means
#Report with `compare_means` because it is easier to plot with `ggpubr` package.

#Error bars for plots 
errbar_lims <- group_by(leaf_traits_noB, Site) |> 
              summarize(mean = mean(logLMA), se = sd(logLMA)/sqrt(n()), 
                        upper = mean+(2*se), lower = mean-(2*se))

#By Site discrete comparison
lma <- ggplot(leaf_traits_noB, aes(y = logLMA, x = Species)) +
  geom_violin(aes(fill = Species)) +
  geom_crossbar(stat = "summary",
                fun = mean,
                fun.max = mean,
                fun.min = mean,
                fatten = 1.5, width = 0.8) +
  geom_point(color = "black", alpha = 0.2,
             size = 1.7, 
             position = position_jitter(w = 0.05))  +
  scale_fill_manual(labels =c('*M. laciniatus*', '*M. nasutus*', '*M. guttatus*'),
                    values = met.brewer("Isfahan2", n = 4, type = "discrete", direction = c(-1))) +
  scale_color_manual(aes(color = "black")) +
  #scale_color_manual(labels=c(''*M. laciniatus*', '*M. nasutus*', '*M. guttatus*'),values= met.brewer("Isfahan2", n = 4, type = "discrete")) +
  theme_classic(base_size = 12) +
  theme(legend.title = element_text(face = "bold"),
        strip.text = element_text(face = "bold"),
        panel.border = element_rect(linetype = "blank", fill = NA),
        legend.text = element_markdown(size = 12), #Make legend text italic
        # axis.text.x = element_text(face="italic", 
        #                             size = 10,  
        #                             hjust = 1,
        #                             angle = 30),
        axis.text.x = element_blank()) +
  labs(y = "log10[Leaf Mass per Area (LMA) (mg/mm)]", x = "") +
  #scale_x_discrete(labels = c('M. laciniatus', 'M. nasutus', 'M. guttatus')) +
  stat_compare_means(comparisons = my_comparisons,
                     method = "wilcox.test",
                     #label.y = c(0.4, 0.6, 1),
                     label = "p.signif") +
  facet_wrap(~Elevation_cat)

lma

#ggsave(filename = file.path(path, "figures/lma_violin.png"), plot = lma, dpi=300, units=c("mm"), width=300, height=150)

# By Elevation continuous comparison
# Linear model summary
summary(lm(logLMA ~ Elevation_m, data = leaf_traits_noB |>
             filter(!logLMA == "-Inf"), na.action = na.omit)) # Remove -Inf values
elev_lma_p <- format.p(cor.test(leaf_traits_noB$logLMA, leaf_traits_noB$Elevation_m, na.action = na.omit)$p.value) # This is just to make the p-value nicer. 

# logLMA by Elevation
lma_cont <- ggplot(leaf_traits_noB, aes(y = logLMA, x = Elevation_m)) +
  geom_jitter(aes(color = Species), alpha = 0.6,
             size = 2.5) +
  geom_smooth(method = lm, se = TRUE, level = 0.95, na.rm = F, color = "black") + 
  geom_smooth(aes(color = Species), method = lm, se = FALSE, na.rm = F) +
  stat_regline_equation(aes(label = paste(#..eq.label.., 
                                          ..adj.rr.label..,
                                          sprintf("italic('p')~'%s'", elev_lma_p), 
                                          sep = "~~~~")), size = rel(4), color = "black") +
  scale_color_manual(labels =c('*M. laciniatus*', '*M. nasutus*', '*M. guttatus*'),
                    values = met.brewer("Isfahan2", n = 4, type = "discrete", direction = c(-1))) +
  theme_classic(base_size = 12) +
  theme(legend.title = element_text(face = "bold"),
        panel.border = element_rect(linetype = "blank", fill = NA),
        legend.text = element_markdown(size = 12), #Make legend text italic
        axis.text.x = element_text(size = 14),
        legend.position = "bottom") +
  labs(y = "log10[Leaf Mass per Area (LMA) (mg/mm)]", x = "Elevation (m.a.s.l.)") +
  scale_y_continuous(expand = c(0.07, 0.07)) 

lma_cont
#ggsave(filename = file.path(path, "figures/lma_elev.png"), plot = logLMA_elev, dpi=300, units=c("mm"), width=300, height=150)

# Joining plots
lma_elevation <- ggarrange(lma, lma_cont, ncol = 1, nrow = 2, 
                           common.legend = TRUE, 
                           legend = "bottom",
                           labels = c("A", "B"),
                           heights = c(1, 1))

lma_elevation

#ggsave(filename = file.path(path, "figures/supp_fig1.png"), plot = lma_elevation, dpi=300, units=c("mm"), width=300, height=250)
```

#### ACI

```{r, aci_elevation}
#| echo: false
#| eval: true
#| tidy: true
#| label: aci_elevation

#ggpubr package used for comparisons tests
aci_compare_means <- compare_means(logACI ~ Species,
         data = leaf_traits_noB,
         group.by = "Elevation_cat",
         method = "wilcox.test",
         p.adjust.method = "BH",
  paired = FALSE,
  alternative = "two.sided", 
  mu = 0, 
  var.equal = FALSE,
  conf.level = 0.95)

#aci_compare_means
#Roughly the same outcome as pairwise_t_test.

#Report with `compare_means` because it is easier to plot with `ggpubr` package.
errbar_lims <- group_by(leaf_traits_noB, Species) |> 
              summarize(mean = mean(logACI), se = sd(logACI)/sqrt(n()), 
                        upper = mean + (2*se), lower = mean - (2*se))

#Comparisons
my_comparisons <- list(c("N", "L"), c("N", "G"), c("L", "G"))


aci <- ggplot(leaf_traits_noB, aes(y = logACI, x = Species)) +
  geom_violin(aes(fill = Species)) +
  geom_crossbar(stat="summary",
                fun = mean,
                fun.max = mean,
                fun.min = mean,
                fatten = 1.5, width = 0.8) +
  geom_point(color="black", alpha = 0.2,
             size=1.7, 
             position = position_jitter(w = 0.05))  +
  scale_fill_manual(labels=c('*M. laciniatus*', '*M. nasutus*', '*M. guttatus*'),
                    values= met.brewer("Isfahan2", n = 4, type = "discrete", direction = -1)) +
  scale_color_manual(aes(color = "black")) +
  #scale_color_manual(labels=c(''*M. laciniatus*', '*M. nasutus*', '*M. guttatus*'),values= met.brewer("Isfahan2", n = 4, type = "discrete")) +
  theme_classic(base_size = 12) +
  theme(legend.title = element_text(face = "bold"),
        strip.text = element_text(face = "bold"),
        panel.border = element_rect(linetype = "blank", fill = NA),
        legend.text = element_markdown(size = 12), #Make legend text italic
        # axis.text.x = element_text(face="italic", 
        #                             size = 14,  
        #                             hjust = 1,
        #                             angle = 30)
        axis.text.x = element_blank()) +
  labs(y = expression(paste("log[ACI (% ", italic("A") [lambda]," at 931 nm / % ", italic("A") [lambda]," at 530 nm)]")), x = "") +
  #scale_x_discrete(labels = c('M. laciniatus', 'M. nasutus', 'M. guttatus')) +
  stat_compare_means(comparisons = my_comparisons,
                     method = "wilcox.test",
                     #label.y = c(0.4, 0.6, 1),
                     label = "p.signif") +
  facet_wrap(~Elevation_cat)

aci
#ggsave(filename = file.path(path, "figures/aci_violin.png"), plot = aci, dpi=300, units=c("mm"), width=300, height=150)

# By Elevation continuous comparison
# Linear model summary
summary(lm(logACI~ Elevation_m, data = leaf_traits_noB, na.action = na.omit))
elev_aci_p <- format.p(cor.test(leaf_traits_noB$logACI, leaf_traits_noB$Elevation_m, na.action = na.omit)$p.value) # This is just to make the p-value nicer. 

# logACI by Elevation
aci_cont <- ggplot(leaf_traits_noB, aes(y = logACI, x = Elevation_m)) +
  geom_jitter(aes(color = Species), alpha = 0.6,
             size = 2.5)  +
  geom_smooth(method = lm, se = TRUE, level = 0.95, na.rm = F, color = "black") + 
  geom_smooth(aes(color = Species), method = lm, se = FALSE, na.rm = F) +
  stat_regline_equation(aes(label = paste(#..eq.label.., 
                                          ..adj.rr.label..,
                                          sprintf("italic('p')~'%s'", elev_aci_p), 
                                          sep = "~~~~")), size = rel(4), color = "black") +
  scale_color_manual(labels =c('*M. laciniatus*', '*M. nasutus*', '*M. guttatus*'),
                    values = met.brewer("Isfahan2", n = 4, type = "discrete", direction = c(-1))) +
  theme_classic(base_size = 12) +
  theme(legend.title = element_text(face = "bold"),
        panel.border = element_rect(linetype = "blank", fill = NA),
        legend.text = element_markdown(size = 12), #Make legend text italic
        axis.text.x = element_text(size = 14),
        legend.position = "bottom") +
 labs(y = expression(paste("log[ACI (% ", italic("A") [lambda]," at 931 nm / % ", italic("A") [lambda]," at 530 nm)]")), x = "Elevation (m.a.s.l.)") +
  scale_y_continuous(expand = c(0.07, 0.07)) 

aci_cont
#ggsave(filename = file.path(path, "figures/aci_elev.png"), plot = aci_cont, dpi=300, units=c("mm"), width=300, height=150)

# Joining plots
aci_elevation <- ggarrange(aci, aci_cont, ncol = 1, nrow = 2, 
                           common.legend = TRUE, 
                           legend = "bottom",
                           labels = c("A", "B"),
                           heights = c(1, 1))

aci_elevation

#ggsave(filename = file.path(path, "figures/supp_fig2.png"), plot = aci_elevation, dpi=300, units=c("mm"), width=300, height=250)
```

#### LBI

```{r, lbi_elevation}
#| echo: false
#| eval: true
#| tidy: true
#| label: lbi_elevation

#ggpubr package used for comparisons tests
lbi_compare_means <- compare_means(logLBI ~ Species,
         data = leaf_traits_noB,
         group.by = "Elevation_cat",
         method = "wilcox.test",
         p.adjust.method = "BH",
  paired = FALSE,
  alternative = "two.sided", 
  mu = 0, 
  var.equal = FALSE,
  conf.level = 0.95)

#lbi_compare_means


#Roughly the same outcome as pairwise_t_test.

#Report with `compare_means` because it is easier to plot with `ggpubr` package.
errbar_lims <- group_by(leaf_traits_noB, Species) |> 
              summarize(mean = mean(logLBI), se = sd(logLBI)/sqrt(n()), 
                        upper = mean + (2*se), lower = mean - (2*se))

#Comparisons
my_comparisons <- list(c("N", "L"), c("N", "G"), c("L", "G"))

lbi <- ggplot(leaf_traits_noB, aes(y = logLBI, x = Species)) +
  geom_violin(aes(fill = Species)) +
  #geom_boxplot(width = 0.3, color = "grey30", alpha = 0.2) +
  geom_crossbar(stat = "summary",
                fun = mean,
                fun.max = mean,
                fun.min = mean,
                fatten = 1.5, width = 0.8) +
  geom_point(color = "black", alpha = 0.2,
             size = 1.7,
             position = position_jitter(w = 0.05))  +
  scale_fill_manual(labels =c('*M. laciniatus*', '*M. nasutus*', '*M. guttatus*'),
                    values = met.brewer("Isfahan2", n = 4, type = "discrete", direction = c(-1))) +
  scale_color_manual(aes(color = "black")) +
  #scale_color_manual(labels=c(''*M. laciniatus*', '*M. nasutus*', '*M. guttatus*'),values= met.brewer("Isfahan2", n = 4, type = "discrete")) +
  theme_classic(base_size = 12) +
  theme(legend.title = element_text(face = "bold"),
        strip.text = element_text(face = "bold"),
        panel.border = element_rect(linetype = "blank", fill = NA),
        legend.text = element_markdown(size = 12), #Make legend text italic
        # axis.text.x = element_text(face="italic", 
        #                             size = 14,  
        #                             hjust = 1,
        #                             angle = 30))
        axis.text.x = element_blank()) +
  labs(y = "log10[LBI (convex_hull - true_area]/convex_hull)]", x = "") +
  #scale_x_discrete(labels = c('M. laciniatus', 'M. nasutus', 'M. guttatus')) +
  stat_compare_means(comparisons = my_comparisons,
                     method = "wilcox.test",
                     #label.y = c(0.4, 0.6, 1),
                     label = "p.signif") +
   facet_wrap(~Elevation_cat)
 
lbi
#ggsave(filename = file.path(path, "figures/lbi_violin.png"), plot = lbi, dpi=300, units=c("mm"), width=300, height=150)

# By Elevation continuous comparison
# Linear model summary
summary(lm(logLBI~ Elevation_m, data = leaf_traits_noB, na.action = na.omit))
elev_lbi_p <- format.p(cor.test(leaf_traits_noB$logLBI, leaf_traits_noB$Elevation_m, na.action = na.omit)$p.value) # This is just to make the p-value nicer. 

# logLBI by Elevation
lbi_cont <- ggplot(leaf_traits_noB, aes(y = logLBI, x = Elevation_m)) +
  geom_jitter(aes(color = Species), alpha = 0.6,
             size = 2.5)  +
  geom_smooth(method = lm, se = TRUE, level = 0.95, na.rm = F, color = "black") + 
  geom_smooth(aes(color = Species), method = lm, se = FALSE, na.rm = F) +
  stat_regline_equation(aes(label = paste(#..eq.label.., 
                                          ..adj.rr.label..,
                                          sprintf("italic('p')~'%s'", elev_lbi_p), 
                                          sep = "~~~~")), size = rel(4), color = "black") +
  scale_color_manual(labels =c('*M. laciniatus*', '*M. nasutus*', '*M. guttatus*'),
                    values = met.brewer("Isfahan2", n = 4, type = "discrete", direction = c(-1))) +
  theme_classic(base_size = 12) +
  theme(legend.title = element_text(face = "bold"),
        panel.border = element_rect(linetype = "blank", fill = NA),
        legend.text = element_markdown(size = 12), #Make legend text italic
        axis.text.x = element_text(size = 14),
        legend.position = "bottom") +
 labs(y = "log10[LBI (convex_hull - true_area]/convex_hull)]", x = "Elevation (m.a.s.l.)") +
  scale_y_continuous(expand = c(0.07, 0.07)) 

lbi_cont
#ggsave(filename = file.path(path, "figures/lbi_elev.png"), plot = lbi_cont, dpi=300, units=c("mm"), width=300, height=150)

# Joining plots
lbi_elevation <- ggarrange(lbi, lbi_cont, ncol = 1, nrow = 2, 
                           common.legend = TRUE, 
                           legend = "bottom",
                           labels = c("A", "B"),
                           heights = c(1, 1))

lbi_elevation

#ggsave(filename = file.path(path, "figures/supp_fig3.png"), plot = lbi_elevation, dpi=300, units=c("mm"), width=300, height=250)
```

#### Toughness

```{r, lps_elevation}
#| echo: false
#| eval: true
#| tidy: true
#| label: lps_elevation

#ggpubr package used for comparisons tests
lps_compare_means <- compare_means(logLPS ~ Species,
         data = leaf_traits_noB,
         group.by = "Elevation_cat",
         method = "wilcox.test",
         p.adjust.method = "BH",
  paired = FALSE,
  alternative = "two.sided", 
  mu = 0, 
  var.equal = FALSE,
  conf.level = 0.95)

#lps_compare_means

#Report with `compare_means` because it is easier to plot with `ggpubr` package.
errbar_lims <- group_by(leaf_traits_noB, Species) |> 
              summarize(mean = mean(logLPS), se = sd(logLPS)/sqrt(n()), 
                        upper = mean + (2*se), lower = mean - (2*se))

#Comparisons
my_comparisons <- list(c("N", "L"), c("N", "G"), c("L", "G"))

lps <- ggplot(leaf_traits_noB, aes(y = logLPS, x = Species)) +
  geom_violin(aes(fill = Species)) +
  #geom_boxplot(width = 0.3, color = "grey30", alpha = 0.2) +
  geom_crossbar(stat = "summary",
                fun = mean,
                fun.max = mean,
                fun.min = mean,
                fatten = 1.5, width = 0.8) +
  geom_point(color = "black", alpha = 0.2,
             size = 1.7,
             position = position_jitter(w = 0.05))  +
  scale_fill_manual(labels =c('*M. laciniatus*', '*M. nasutus*', '*M. guttatus*'),
                    values = met.brewer("Isfahan2", n = 4, type = "discrete", direction = c(-1))) +
  scale_color_manual(aes(color = "black")) +
  #scale_color_manual(labels=c(''*M. laciniatus*', '*M. nasutus*', '*M. guttatus*'),values= met.brewer("Isfahan2", n = 4, type = "discrete")) +
  theme_classic(base_size = 12) +
  theme(legend.title = element_text(face = "bold"),
        strip.text = element_text(face = "bold"),
        panel.border = element_rect(linetype = "blank", fill = NA),
        legend.text = element_markdown(size = 12), #Make legend text italic
        # axis.text.x = element_text(face="italic", 
        #                             size = 14,  
        #                             hjust = 1,
        #                             angle = 30)
        axis.text.x = element_blank()) +
  labs(y = expression(paste("Leaf punch strength (N mm","^-1)")), x = "") +
  #scale_x_discrete(labels = c('M. laciniatus', 'M. nasutus', 'M. guttatus')) +
  stat_compare_means(comparisons = my_comparisons,
                     method = "wilcox.test",
                     #label.y = c(0.4, 0.6, 1),
                     label = "p.signif") +
   facet_wrap(~Elevation_cat)
 

lps
#ggsave(filename = file.path(path, "figures/lps_violin.png"), plot = lps, dpi=300, units=c("mm"), width=300, height=150)

# By Elevation continuous comparison
# Linear model summary
summary(lm(logLPS ~ Elevation_m, data = leaf_traits_noB, na.action = na.omit))
elev_lps_p <- format.p(cor.test(leaf_traits_noB$logLPS, leaf_traits_noB$Elevation_m, na.action = na.omit)$p.value) # This is just to make the p-value nicer. 

# logLPS by Elevation
lps_cont <- ggplot(leaf_traits_noB, aes(y = logLPS, x = Elevation_m)) +
  geom_jitter(aes(color = Species), alpha = 0.6,
             size = 2.5)  +
  geom_smooth(method = lm, se = TRUE, level = 0.95, na.rm = F, color = "black") + 
  geom_smooth(aes(color = Species), method = lm, se = FALSE, na.rm = F) +
  stat_regline_equation(aes(label = paste(#..eq.label.., 
                                          ..adj.rr.label..,
                                          sprintf("italic('p')~'%s'", elev_lps_p), 
                                          sep = "~~~~")), size = rel(4), color = "black") +
  scale_color_manual(labels =c('*M. laciniatus*', '*M. nasutus*', '*M. guttatus*'),
                    values = met.brewer("Isfahan2", n = 4, type = "discrete", direction = c(-1))) +
  theme_classic(base_size = 12) +
  theme(legend.title = element_text(face = "bold"),
        panel.border = element_rect(linetype = "blank", fill = NA),
        legend.text = element_markdown(size = 12), #Make legend text italic
        axis.text.x = element_text(size = 14),
        legend.position = "bottom") +
 labs(y = expression(paste("Leaf punch strength (N mm","^-1)")), x = "Elevation (m.a.s.l.)") +
  scale_y_continuous(expand = c(0.07, 0.07)) 

lps_cont
#ggsave(filename = file.path(path, "figures/lps_elev.png"), plot = lps_cont, dpi=300, units=c("mm"), width=300, height=150)

# Joining plots
lps_elevation <- ggarrange(lps, lps_cont, ncol = 1, nrow = 2, 
                           common.legend = TRUE, 
                           legend = "bottom",
                           labels = c("A", "B"),
                           heights = c(1, 1))

lps_elevation

#ggsave(filename = file.path(path, "figures/supp_fig4.png"), plot = lps_elevation, dpi=300, units=c("mm"), width=300, height=250)
```

#### Thickness

```{r, lt_elevation}
#| echo: false
#| eval: true
#| tidy: true
#| label: lt_violin

#ggpubr package used for comparisons tests
lt_compare_means <- compare_means(logLT ~ Species,
         data = leaf_traits_noB,
         group.by = "Elevation_cat",
         method = "wilcox.test",
         p.adjust.method = "BH",
  paired = FALSE,
  alternative = "two.sided", 
  mu = 0, 
  var.equal = FALSE,
  conf.level = 0.95)

lt_compare_means
#Roughly the same outcome as pairwise_t_test.

#Report with `compare_means` because it is easier to plot with `ggpubr` package.
errbar_lims <- group_by(leaf_traits_noB, Species) |> 
              summarize(mean = mean(logLT), se = sd(logLT)/sqrt(n()), 
                        upper = mean + (2*se), lower = mean - (2*se))

#Comparisons
my_comparisons <- list(c("N", "L"), c("N", "G"), c("L", "G"))

lt <- ggplot(leaf_traits_noB, aes(y= logLT, x = Species)) +
  geom_violin(aes(fill = Species)) +
  #geom_boxplot(width = 0.3, color = "grey30", alpha = 0.2) +
  geom_crossbar(stat = "summary",
                fun = mean,
                fun.max = mean,
                fun.min = mean,
                fatten = 1.5, width = 0.8) +
  geom_point(color = "black", alpha = 0.2,
             size = 1.7,
             position = position_jitter(w = 0.05))  +
  scale_fill_manual(labels =c('*M. laciniatus*', '*M. nasutus*', '*M. guttatus*'),
                    values = met.brewer("Isfahan2", n = 4, type = "discrete", direction = c(-1))) +
  scale_color_manual(aes(color = "black")) +
  #scale_color_manual(labels=c(''*M. laciniatus*', '*M. nasutus*', '*M. guttatus*'),values= met.brewer("Isfahan2", n = 4, type = "discrete")) +
  theme_classic(base_size = 12) +
  theme(legend.title = element_text(face = "bold"),
        strip.text = element_text(face = "bold"),
        panel.border = element_rect(linetype = "blank", fill = NA),
        legend.text = element_markdown(size = 12), #Make legend text italic
        # axis.text.x = element_text(face="italic", 
        #                             size = 14,  
        #                             hjust = 1,
        #                             angle = 30)
        axis.text.x = element_blank()) +
  labs(y = expression(paste("Leaf thickness (",mu,"m)")), x = "") +
  scale_x_discrete(labels = c('M. laciniatus', 'M. nasutus', 'M. guttatus')) +
  stat_compare_means(comparisons = my_comparisons,
                     method = "wilcox.test",
                     #label.y = c(0.4, 0.6, 1),
                     label = "p.signif") +
   facet_wrap(~Elevation_cat)
 
lt
#ggsave(filename = file.path(path, "figures/lt_violin.png"), plot = lt, dpi=300, units=c("mm"), width=300, height=150)

# By Elevation continuous comparison
# Linear model summary
summary(lm(logLT ~ Elevation_m, data = leaf_traits_noB, na.action = na.omit))
elev_lt_p <- format.p(cor.test(leaf_traits_noB$logLT, leaf_traits_noB$Elevation_m, na.action = na.omit)$p.value) # This is just to make the p-value nicer. 

# logLT by Elevation
lt_cont <- ggplot(leaf_traits_noB, aes(y = logLT, x = Elevation_m)) +
  geom_jitter(aes(color = Species), alpha = 0.6,
             size = 2.5)  +
  geom_smooth(method = lm, se = TRUE, level = 0.95, na.rm = F, color = "black") + 
  geom_smooth(aes(color = Species), method = lm, se = FALSE, na.rm = F) +
  stat_regline_equation(aes(label = paste(#..eq.label.., 
                                          ..adj.rr.label..,
                                          sprintf("italic('p')~'%s'", elev_lt_p), 
                                          sep = "~~~~")), size = rel(4), color = "black") +
  scale_color_manual(labels =c('*M. laciniatus*', '*M. nasutus*', '*M. guttatus*'),
                    values = met.brewer("Isfahan2", n = 4, type = "discrete", direction = c(-1))) +
  theme_classic(base_size = 12) +
  theme(legend.title = element_text(face = "bold"),
        panel.border = element_rect(linetype = "blank", fill = NA),
        legend.text = element_markdown(size = 12), #Make legend text italic
        axis.text.x = element_text(size = 14),
        legend.position = "bottom") +
 labs(y = expression(paste("Leaf thickness (",mu,"m)")), x = "Elevation (m.a.s.l.)") +
  scale_y_continuous(expand = c(0.07, 0.07)) 

lt_cont
#ggsave(filename = file.path(path, "figures/lps_elev.png"), plot = lps_cont, dpi=300, units=c("mm"), width=300, height=150)

# Joining plots
lt_elevation <- ggarrange(lt, lt_cont, ncol = 1, nrow = 2, 
                           common.legend = TRUE, 
                           legend = "bottom",
                           labels = c("A", "B"),
                           heights = c(1, 1))
lt_elevation
ggsave(filename = file.path(path, "figures/supp_fig5.png"), plot = lt_elevation, dpi=300, units=c("mm"), width=300, height=250)
```

#### Multiple plots together

```{r}
# Multiples plots together
#LMA and ACI
arrange <- ggarrange(lma, aci, lbi, lps, lt,
                     nrow = 2, 
                     ncol = 3, 
                     common.legend = TRUE, 
                     legend="right")
arrange

ggsave(filename = file.path(path, "Plots", "/lma_aci_evo23.png"), plot = arrange, dpi=300, units=c("mm"), width=300, height=150)

#LBI
ggsave(filename = file.path(path, "Plots", "/lbi_evo23.png"), plot = lbi, dpi=300, units=c("mm"), width=150, height=150)

#Toughness and Thickness
arrange2 <- ggarrange( thg, thk, nrow = 1, ncol=2, common.legend = TRUE, legend="right")
arrange2

ggsave(filename = file.path(path, "Plots", "/thg_thk_evo23.png"), plot = arrange2, dpi=300, units=c("mm"), width=300, height=150)


# Adding caption
ant_caption <- "*All individuals per tree species included (n = 210)"
ant_arranged_with_caption <- annotate_figure(ant_arranged, bottom = text_grob(ant_caption), fig.lab.pos = "bottom.right", fig.lab.size = 6)

ant_arranged_with_caption
```

#### PCA

```{r, PCA}
#| echo: false
#| eval: true
#| tidy: true
#| fig-width: 5
#| fig-height: 5
#| label: pca
#| fig-cap: "PCA of leaf traits by species."

# PCA using covariates to explain species richness/abundance ####
data.pca <- leaf_traits_noB |>
  na.omit() |>
  select(c(19:23)) #Selecting only the log-transformed leaf trait columns. We use the log transformed data due to our findings of non-normality in the data. See this post for a hot take: https://stats.stackexchange.com/questions/164381/why-log-transforming-the-data-before-performing-principal-component-analysis

leaf_traits.pca <- na.omit(leaf_traits_noB) 


###Run this to create pca with prcomp function
pca <- prcomp(data.pca, scale = TRUE)
pca$rotation=-pca$rotation
pca$x=-pca$x

#Checking the PCA
plot(pca,type = "lines")
biplot(pca) # Base type PCA

# PCA using autoplot() and prcomp()and modifying with ggplot syntax ####
pca_auto <- autoplot((pca), data = data.frame(leaf_traits.pca), # For some reason this functions require data to be data= data.frame()
         alpha = 0, #Setting alpha to zero render the automatic circle point null.Manipulate shapes with geom_point(). 
         loadings = TRUE,loadings.colour = "black",
         loadings.label = TRUE, loadings.label.colour="black",
         loadings.label.size = 4, size = 7, 
         loadings.label.vjust = 0, 
         loadings.label.hjust = -0.15) + 
  geom_point(aes(fill = Species, color = Species), alpha = 0.5, size = 3) +
  geom_hline(yintercept = 0, colour = "gray45") +
  geom_vline(xintercept = 0, colour = "gray45") +
    scale_fill_manual(labels=c("*M. laciniatus*", "*M. nasutus*", "*M. guttatus*"), 
                    values = met.brewer("Isfahan2", n = 4, type = "discrete", direction = c(-1))) +
  scale_color_manual(labels = c("*M. laciniatus*", "*M. nasutus*", "*M. guttatus*"),
                     values = met.brewer("Isfahan2", n = 4, type = "discrete", direction = c(-1))) +
  stat_ellipse(aes(color = Species), 
               geom = "path", 
               size = 1.3, 
               position = "identity", 
               type = "t", 
               linetype = 1, 
               level = 0.95, 
               segments = 51, na.rm = TRUE, show.legend = NA, inherit.aes = TRUE) +
  #scale_x_continuous(expand = c(0.0, -0.09)) +
  theme_classic(base_size = 12) +
  theme(legend.text = element_markdown(),
        legend.position = "bottom",
        legend.title = element_text(face = "bold")) 
  # labs(caption = expression("ACI = anthocyanins, LPS = leaf punch strength, LMA = leaf mass per area, LT = leaf thickness. LBI = Leaf lobe index. All leaf replicates per species ("~ italic("n") ~ "= 501)."))


pca_auto$layers <- c(pca_auto$layers, pca_auto$layers[[2]], pca_auto$layers[[3]]) # This adds/copies layers 2-3 and overlays them. It makes the arrows be on top of the points. There must be a better ways of doing this.

pca_auto

#ggsave(filename = file.path(path, "figures/pca.png"), plot = pca_auto, dpi=300, units=c("mm"), width=150, height=150)
```

# Community Diversity

Here we are going to explore the relationship between elevation and FEF community composition through richness and species diversity. We have already calculated Hill numbers in [Cleaning and Shaping data]. He we create a dissimilarity matrix and calculate the distance between samples. We remove *M. bicolor* (species "B") from the analysis (see [Cleaning and Shaping data] for more details). 

```{r, dist_matrix}
#| echo: false
#| eval: true
#| tidy: true

# ASV abundance matrix
asv_matrix <- ps_clean_3_df |>
  select(!c(2:8, SDSB_B001, SDSB_B002, SDSB_B005)) |> #Removing samples from species "B"
  column_to_rownames(var = "OTU") |>
  as.matrix()
# Results in 157 x 157 matrix

# Names of the samples
names_list <- colnames(asv_matrix)

#Bray-Curtis dissimilarity matrix
asv_vegdist <- vegdist(t(asv_matrix), method = "bray", binary = FALSE, upper = FALSE) |>
  as.matrix()

# Adding column and rownames
rownames(asv_vegdist) <- names_list
colnames(asv_vegdist) <- names_list

# Geographical matrix
#geo_matrix <- distm(plant_traits[,c("Longitude", "Latitude")], fun = distHaversine)
geo_distm <- distm(plant_traits |>
                      filter(Unique_ID %in% names_list) |>
                     # column_to_rownames(var = "Unique_ID") |>
                      select(Longitude, Latitude), fun = distVincentyEllipsoid)
                      
# Adding column and rownames
rownames(geo_distm) <- names_list
colnames(geo_distm) <- names_list
```

#### Rarefaction curves

```{r, rarefaction}
# library(iNEXT)
# out1 <- iNEXT(dist_matrix, q=0, datatype="abundance", endpoint = 40)
# out1$DataInfo
# out1$DataInfo$SC
# #Number of species
# plot_sp <- ggiNEXT(out1, type=1, se=TRUE, grey=FALSE) +
#   theme_classic(base_size = 18) +
#   theme(legend.position="right")

```

#### Hill numbers

```{r, hill_numbers}
# Shannon Diversity or hill number 1
# Three main faceted plots come out of this chunk

#####################################################
# Formatting formula for p value
format.p <- function(p, precision = 0.001) {
  digits <- -log(precision, base = 10)
  p <- formatC(p, format = 'f', digits = digits)
  if (p < 0.001) {
    p = paste0('< ', precision)}
  if (p >= 0.001) {
    p = paste0('= ', p)    }
  sub("0", "0", p)
}
######################################################

########## Labels ###########
#Legend title label
legend_title <- "Species"
# Species labels
labels_list <- c("M. laciniatus", "M. nasutus", "M. guttatus")
names(labels_list) <- c("L", "N", "G")
#############################

#####################################################
#### Alpha diversity ####
#### Across elevation ####
#####################################################
# Hill number 1
# Shannon diversity or hill number 1
# Linear model summary
summary(lm(Shannon ~ Elevation_m, data = plant_traits))
elev_div_p <- format.p(cor.test(plant_traits$Shannon, plant_traits$Elevation_m)$p.value) # This is just to make the p-value nicer. 

# Plot
hill1_diversity <- ggplot(data = plant_traits  |>
  filter(!Species == "B"), 
  aes(x = Elevation_m, y = hill_1, color = Species)) +
   geom_jitter(aes(color = plant_traits$Species[plant_traits$Species != "B"]), size = 3, alpha = 0.7) + 
   geom_smooth(method = lm, se = F) + 
   # stat_regline_equation(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~'))) 
   geom_smooth(method = lm, se = T, level = 0.95, na.rm = F, color = "black") + 
   stat_regline_equation(label.y = 25, label.x = 1000,
                         aes(label = paste(..eq.label.., #sprintf("italic('p')~'%s'", elev_div_p), 
                                          sep = "~~~~")), size = rel(4), color = "black") +
   stat_regline_equation(label.y = 22, label.x = 1000,
                          aes(label = ..adj.rr.label.., ), size = rel(4), color = "black") + 
   #scale_fill_manual(labels = c("*M. laciniatus*","*M. nasutus*", "*M. guttatus*"), 
                     #values = met.brewer("Isfahan2", n = 4, type = "discrete", direction = c(-1))) + 
   scale_color_manual(legend_title, labels = c("*M. laciniatus*", "*M. nasutus*", "*M. guttatus*"), 
                     values = met.brewer("Isfahan2", n = 4, type = "discrete", 
                                          direction = c(-1))) + 
  labs(y = "\U1D492 = 1", x = "Elevation (m.a.s.l.)", col = "") +
  #labs(y = expression("*q* = 1"), x = "Elevation (m.a.s.l.)", col = "") + 
   theme_classic(base_size = 12) +
   theme(legend.title = element_text(face = "bold"),
         #strip.text = element_text(face = "italic", size = 14),
         strip.background = element_blank(),
         strip.text = element_blank(),
         panel.border = element_rect(linetype = "blank", fill = NA),
         legend.text = element_markdown(size = 12), #Make legend text italic
         axis.text.x = element_text(size = 12),
         #axis.title.x = element_text(size = 14),
         axis.title.x = element_blank()) +
  #facet_wrap(~ Species, labeller = labeller(Species = labels_list)) +
  facet_wrap(~ Species) +
  guides(color = "none")        #To turn off color legend

hill1_diversity

#ggsave(filename = file.path(path, "figures/shannon_elevation.png"), plot = hill1_diversity, dpi=300, units=c("mm"), width=250, height=150)

# Linear models per species
# Linear model summary
# M. laciniatus
summary(lm(hill_1 ~ Elevation_m, data = plant_traits[plant_traits$Species == "L",]))
#Not significant

# M. nasutus
summary(lm(hill_1 ~ Elevation_m, data = plant_traits[plant_traits$Species == "N",]))
#Not significant

# M. guttatus
summary(lm(hill_1 ~ Elevation_m, data = plant_traits[plant_traits$Species == "G",]))
#Not significant


# Hill number 0 
# Species richness or hill number 0

#Linear model summary
summary(lm(Observed ~ Elevation_m, data = plant_traits))
richness_p <- format.p(cor.test(plant_traits$Observed, plant_traits$Elevation_m)$p.value) # This is just to make the p-value nicer. 
# Species labels
labels_list <- c("M. laciniatus", "M. nasutus", "M. guttatus")
names(labels_list) <- c("L", "N", "G")

# Plot
hill0_diversity <- ggplot(data = plant_traits  |>
  filter(!Species == "B"), 
  aes(x = Elevation_m, y = Observed, color = Species)) +
   geom_jitter(aes(color = plant_traits$Species[plant_traits$Species != "B"]), size = 3, alpha = 0.7) + 
   geom_smooth(method = lm, se = F) + 
   # stat_regline_equation(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~'))) 
   geom_smooth(method = lm, se = T, level = 0.95, na.rm = F, color = "black") + 
   stat_regline_equation(label.y = 57, label.x = 1000, 
                         aes(label = paste(..eq.label.., #sprintf("italic('p')~'%s'", richness_p), 
                                          sep = "~~~~")), size = rel(4), color = "black") +
  stat_regline_equation(label.y = 52, label.x = 1000, 
                          aes(label = ..adj.rr.label..), size = rel(4), color = "black") + 
   scale_fill_manual(labels = c("*M. laciniatus*","*M. nasutus*", "*M. guttatus*"), 
                     values = met.brewer("Isfahan2", n = 4, type = "discrete", direction = c(-1))) + 
   scale_color_manual(legend_title, labels = c("*M. laciniatus*", "*M. nasutus*", "*M. guttatus*"), 
                      values = met.brewer("Isfahan2", n = 4, type = "discrete", direction = c(-1))) + 
   labs(y =  "\U1D492 = 0", x = "Elevation (m.a.s.l.)", col = "") + 
   theme_classic(base_size = 12) +
   theme(legend.title = element_text(face = "bold"),
         strip.text = element_text(face = "italic", size = 14),
         panel.border = element_rect(linetype = "blank", fill = NA),
         legend.text = element_markdown(size = 12), #Make legend text italic
         axis.text.x = element_text(size = 12),
         #axis.title.x = element_text(size = 14), 
         axis.title.x = element_blank()) +
  facet_wrap(~ Species, labeller = labeller(Species = labels_list)) +
  guides(color = "none")        #To turn off color legend
  # annotate(geom = "text", x = 2100, y = 2.5, label = "p = 0.03", color = "black")
#annotate(geom="text", x=2100, y=50, label="p = 0.06", color = "black")

hill0_diversity

#ggsave(filename = file.path(path, "figures/richness_elevation.png"), plot = hill0_diversity, dpi=300, units=c("mm"), width=250, height=150)

# Linear models per species
# Linear model summary
# M. laciniatus
summary(lm(Observed ~ Elevation_m, data = plant_traits[plant_traits$Species == "L",]))
#Not significant

# M. nasutus
summary(lm(Observed ~ Elevation_m, data = plant_traits[plant_traits$Species == "N",]))
#Not significant

# M. guttatus
summary(lm(Observed~ Elevation_m, data = plant_traits[plant_traits$Species == "G",]))
#Not significant


# Hill number 2
# Inverse Simpson diversity or hill number 2
# Linear model summary
summary(lm(hill_2 ~ Elevation_m, data = plant_traits))
elev_div_p <- format.p(cor.test(plant_traits$Shannon, plant_traits$Elevation_m)$p.value) # This is just to make the p-value nicer. 

# Plot
hill2_diversity <- ggplot(data = plant_traits  |>
  filter(!Species == "B"), 
  aes(x = Elevation_m, y = hill_2, color = Species)) +
   geom_jitter(aes(color = plant_traits$Species[plant_traits$Species != "B"]), size = 3, alpha = 0.7) + 
   geom_smooth(method = lm, se = F) + 
   # stat_regline_equation(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~'))) 
   geom_smooth(method = lm, se = T, level = 0.95, na.rm = F, color = "black") + 
   stat_regline_equation(label.y = 17, label.x = 1000,
                         aes(label = paste(..eq.label.., #sprintf("italic('p')~'%s'", elev_div_p), 
                                          sep = "~~~~")), size = rel(4), color = "black") +
   stat_regline_equation(label.y = 15, label.x = 1000,
                          aes(label = ..adj.rr.label.., ), size = rel(4), color = "black") + 
   #scale_fill_manual(labels = c("*M. laciniatus*","*M. nasutus*", "*M. guttatus*"), 
                     #values = met.brewer("Isfahan2", n = 4, type = "discrete", direction = c(-1))) + 
   scale_color_manual(legend_title, labels = c("*M. laciniatus*", "*M. nasutus*", "*M. guttatus*"), 
                     values = met.brewer("Isfahan2", n = 4, type = "discrete", 
                                          direction = c(-1))) + 
  labs(y = "\U1D492 = 2", x = "Elevation (m.a.s.l.)", col = "") +
  #labs(y = expression("*q* = 1"), x = "Elevation (m.a.s.l.)", col = "") + 
   theme_classic(base_size = 12) +
   theme(legend.title = element_text(face = "bold"),
         #strip.text = element_text(face = "italic", size = 14),
         strip.background = element_blank(),
         strip.text = element_blank(),
         panel.border = element_rect(linetype = "blank", fill = NA),
         legend.text = element_markdown(size = 12), #Make legend text italic
         axis.text.x = element_text(size = 12),
         axis.title.x = element_text(size = 14)) +
  #facet_wrap(~ Species, labeller = labeller(Species = labels_list)) +
  facet_wrap(~ Species) +
  guides(color = "none")        #To turn off color legend

hill2_diversity

#ggsave(filename = file.path(path, "figures/invsimpson_elevation.png"), plot = hill2_diversity, dpi=300, units=c("mm"), width=250, height=150)

# Linear models per species
# Linear model summary
# M. laciniatus
summary(lm(hill_2 ~ Elevation_m, data = plant_traits[plant_traits$Species == "L",]))
#Not significant

# M. nasutus
summary(lm(hill_2 ~ Elevation_m, data = plant_traits[plant_traits$Species == "N",]))
#Not significant

# M. guttatus
summary(lm(hill_2 ~ Elevation_m, data = plant_traits[plant_traits$Species == "G",]))
#Not significant


###### Joined plots ######
hill_numbers <- ggarrange(hill0_diversity, hill1_diversity, hill2_diversity, 
          nrow = 3, ncol = 1)

#ggsave(filename = file.path(path, "figures/hill_numbers_elevation.png"), plot = hill_numbers, dpi=600, units=c("mm"), width=300, height=275)

############################################
#### Alpha diversity ####
#### At the species level ####
############################################

labels_list <- c("M. laciniatus", "M. nasutus", "M. guttatus")
names(labels_list) <- c("L", "N", "G")

# Plot
hill0_species <- ggplot(data = plant_traits  |>
  filter(!Species == "B"), 
  aes(x = Species, y = Observed)) +
  geom_violin(aes(fill = Species)) +
  geom_crossbar(stat="summary",
                fun = mean,
                fun.max = mean,
                fun.min = mean,
                fatten = 1.5, width = 0.8) +
  geom_point(color="black", alpha = 0.2,
             size=1.7, 
             position = position_jitter(w = 0.05))  +
  scale_fill_manual(labels=c('*M. laciniatus*', '*M. nasutus*', '*M. guttatus*'),
                    values= met.brewer("Isfahan2", n = 4, type = "discrete", direction = -1)) +
  scale_color_manual(aes(color = "black")) +
   labs(y =  "\U1D492 = 0", x = "", col = "") + 
   theme_classic(base_size = 12) +
   theme(legend.title = element_text(face = "bold"),
         strip.text = element_text(face = "italic", size = 14),
         panel.border = element_rect(linetype = "blank", fill = NA),
         legend.text = element_markdown(size = 12), #Make legend text italic
         axis.text.x = element_text(size = 12),
         #axis.title.x = element_text(size = 14), 
         axis.text.x.bottom = element_blank(),
         axis.title.x = element_blank()) +
    stat_compare_means(comparisons = my_comparisons,
                     method = "wilcox.test", 
                     label = "p.signif") 
  guides(color = "none")        #To turn off color legend
  
hill0_species
# annotate(geom = "text", x = 2100, y = 2.5, label = "p = 0.03", color = "black")
#annotate(geom="text", x=2100, y=50, label="p = 0.06", color = "black")


# Hill number 1
# Shannon diversity or hill number 1
# Plot
hill1_species <- ggplot(data = plant_traits  |>
  filter(!Species == "B"), 
  aes(x = Species, y = hill_1)) +
  geom_violin(aes(fill = Species)) +
  geom_crossbar(stat="summary",
                fun = mean,
                fun.max = mean,
                fun.min = mean,
                fatten = 1.5, width = 0.8) +
  geom_point(color="black", alpha = 0.2,
             size=1.7, 
             position = position_jitter(w = 0.05))  +
  scale_fill_manual(labels=c('*M. laciniatus*', '*M. nasutus*', '*M. guttatus*'),
                    values= met.brewer("Isfahan2", n = 4, type = "discrete", direction = -1)) +
  scale_color_manual(aes(color = "black")) +
   labs(y =  "\U1D492 = 1", x = "", col = "") + 
   theme_classic(base_size = 12) +
   theme(legend.title = element_text(face = "bold"),
         strip.text = element_text(face = "italic", size = 14),
         panel.border = element_rect(linetype = "blank", fill = NA),
         legend.text = element_markdown(size = 12), #Make legend text italic
         axis.text.x = element_text(size = 12),
         #axis.title.x = element_text(size = 14), 
         axis.text.x.bottom = element_blank(),
         axis.title.x = element_blank()) +
  stat_compare_means(comparisons = my_comparisons,
                     method = "wilcox.test", 
                     label = "p.signif") 
 # facet_wrap(~ Species, labeller = labeller(Species = labels_list)) +
  guides(color = "none")        #To turn off color legend
  
hill1_species


# Hill number 2
# Inverse Simpson diversity or hill number 2
hill2_species <- ggplot(data = plant_traits  |>
  filter(!Species == "B"), 
  aes(x = Species, y = hill_2)) +
  geom_violin(aes(fill = Species)) +
  geom_crossbar(stat="summary",
                fun = mean,
                fun.max = mean,
                fun.min = mean,
                fatten = 1.5, width = 0.8) +
  geom_point(color="black", alpha = 0.2,
             size=1.7, 
             position = position_jitter(w = 0.05))  +
  scale_fill_manual(labels=c('*M. laciniatus*', '*M. nasutus*', '*M. guttatus*'),
                    values= met.brewer("Isfahan2", n = 4, type = "discrete", direction = -1)) +
  scale_color_manual(aes(color = "black")) +
   labs(y =  "\U1D492 = 2", x = "", col = "") + 
   theme_classic(base_size = 12) +
   theme(legend.title = element_text(face = "bold"),
         strip.text = element_text(face = "italic", size = 14),
         panel.border = element_rect(linetype = "blank", fill = NA),
         legend.text = element_markdown(size = 12), #Make legend text italic
         axis.text.x = element_text(size = 12),
         #axis.title.x = element_text(size = 14), 
         axis.text.x.bottom = element_blank(),
         axis.title.x = element_blank()) +
  stat_compare_means(comparisons = my_comparisons,
                     method = "wilcox.test", 
                     label = "p.signif") 
 # facet_wrap(~ Species, labeller = labeller(Species = labels_list)) +
  guides(color = "none")        #To turn off color legend
  
hill2_species

# Joined plots
hill_numbers_species <- ggarrange(hill0_species, hill1_species, hill2_species, 
                                  nrow = 1, ncol = 3,
                                  common.legend = TRUE,
                                  labels = c("A", "B", "C"),
                                  legend = "bottom")

hill_numbers_species
#ggsave(filename = file.path(path, "figures/hill_numbers_species.png"), plot = hill_numbers_species, dpi=300, units=c("mm"), width=250, height=275)

#################################
#### Beta diversity ####
#### Across elevation ####
#################################

# Observed richness
# Hill number 0
hill0_beta <-  ggplot(plant_traits |>
                filter(!Species == "B"), aes(x = Elevation_cat, y = Observed)) +
  
  geom_violin(aes(fill = Elevation_cat)) +
  geom_crossbar(stat="summary", 
                fun = mean, 
                fun.max = mean, 
                fun.min = mean,  
                fatten = 2, 
                width = 0.5, 
                color="black") +
  geom_point(aes(shape = Species),color="black", alpha = 0.4,size= 2.5, position = position_jitter(w=0.05)) +
  scale_color_manual(labels=c('Low', 'Mid', 'High'),values= met.brewer("Lakota", n = 3, type = "discrete")) +
  scale_fill_manual(labels=c('Low', 'Mid', 'High'),values= met.brewer("Lakota", n = 3, type = "discrete")) +
  scale_shape_manual(values=c(15:18),labels=c('*M. laciniatus*', '*M. nasutus*', '*M. guttatus*')) +
  theme_classic(base_size = 14) +
  theme(strip.text.x = element_text(colour = "black", face = "bold"),
        legend.title = element_text(face = "bold"),
        panel.border = element_rect(linetype = "blank", fill = NA),
        legend.text = element_markdown(),
        axis.text.x = element_text(face="italic", size = 14)) +
  scale_x_discrete(labels = c('', '', '', '')) +
  stat_compare_means(comparisons = my_comparisons3,
                     method = "wilcox.test", 
                     label = "p.signif") +
  labs(y = "\U1D492 = 0", x = "") +
  guides(fill = guide_legend(title = "Elevation"), shape = guide_legend(title = "Species"))

hill0_beta

#ggsave(file.path(path, "figures/shannon_elevation.png") , plot = bbe, dpi=300, units=c("mm"), width=200, height=150)

# Hill number 1
# Shannon diversity or hill number 1
hill1_beta <- ggplot(plant_traits |>
                filter(!Species == "B"), aes(x = Elevation_cat, y = hill_1)) +
  
  geom_violin(aes(fill = Elevation_cat)) +
  geom_crossbar(stat="summary", 
                fun = mean, 
                fun.max = mean, 
                fun.min = mean,  
                fatten = 2, 
                width = 0.5, 
                color="black") +
  geom_point(aes(shape = Species),color="black", alpha = 0.4,size= 2.5, position = position_jitter(w=0.05)) +
  scale_color_manual(labels=c('Low', 'Mid', 'High'),values= met.brewer("Lakota", n = 3, type = "discrete")) +
  scale_fill_manual(labels=c('Low', 'Mid', 'High'),values= met.brewer("Lakota", n = 3, type = "discrete")) +
  scale_shape_manual(values=c(15:18),labels=c('*M. laciniatus*', '*M. nasutus*', '*M. guttatus*')) +
  theme_classic(base_size = 14) +
  theme(strip.text.x = element_text(colour = "black", face = "bold"),
        legend.title = element_text(face = "bold"),
        panel.border = element_rect(linetype = "blank", fill = NA),
        legend.text = element_markdown(),
        axis.text.x = element_text(face="italic", size = 14)) +
  scale_x_discrete(labels = c('', '', '', '')) +
  stat_compare_means(comparisons = my_comparisons3,
                     method = "wilcox.test", 
                     label = "p.signif") +
  labs(y = "\U1D492 = 1", x = "") +
  guides(fill = guide_legend(title = "Elevation"), shape = guide_legend(title = "Species"))

hill1_beta


# Hill number 2
# Inverse Simpson diversity or hill number 2

hill2_beta <- ggplot(plant_traits |>
                filter(!Species == "B"), aes(x = Elevation_cat, y = hill_2)) +
  
  geom_violin(aes(fill = Elevation_cat)) +
  geom_crossbar(stat="summary", 
                fun = mean, 
                fun.max = mean, 
                fun.min = mean,  
                fatten = 2, 
                width = 0.5, 
                color="black") +
  geom_point(aes(shape = Species),color="black", alpha = 0.4,size= 2.5, position = position_jitter(w=0.05)) +
  scale_color_manual(labels=c('Low', 'Mid', 'High'),values= met.brewer("Lakota", n = 3, type = "discrete")) +
  scale_fill_manual(labels=c('Low', 'Mid', 'High'),values= met.brewer("Lakota", n = 3, type = "discrete")) +
  scale_shape_manual(values=c(15:18),labels=c('*M. laciniatus*', '*M. nasutus*', '*M. guttatus*')) +
  theme_classic(base_size = 14) +
  theme(strip.text.x = element_text(colour = "black", face = "bold"),
        legend.title = element_text(face = "bold"),
        panel.border = element_rect(linetype = "blank", fill = NA),
        legend.text = element_markdown(),
        axis.text.x = element_text(face="italic", size = 14)) +
  scale_x_discrete(labels = c('', '', '', '')) +
  stat_compare_means(comparisons = my_comparisons3,
                     method = "wilcox.test", 
                     label = "p.signif") +
  labs(y = "\U1D492 = 2", x = "") +
  guides(fill = guide_legend(title = "Elevation"), shape = guide_legend(title = "Species"))

hill2_beta


# Joining plots
hill_beta <- ggarrange(hill0_beta, hill1_beta, hill2_beta, 
          nrow = 1, ncol = 3,
          common.legend = TRUE,
          legend = "bottom",
          labels = c("A", "B", "C"))

hill_beta
#ggsave(file.path(path, "figures/figure3.png"), plot = hill_beta, dpi=300, units=c("mm"), width=300, height=100)
```

#### Mantel tests and correlations

```{r, mantel}
#| echo: false
#| eval: true
#| tidy: true
# Prepare the data for correlation plot
# Longer format
asv_long <- asv_vegdist |>
  as_tibble(rownames = "A") |>
  pivot_longer(-A, names_to = "B", values_to = "bray_diss")

geo_long <- geo_distm |>
  as_tibble(rownames = "A") |>
  pivot_longer(-A, names_to = "B", values_to = "geo_dist")

# Merge the two dataframes
asv_geo_matrix_long <- inner_join(asv_long, geo_long, by = c("A", "B")) |>
  inner_join(plant_traits |>
               dplyr::select(Unique_ID, Site, Species, Elevation_cat), by = c("A" = "Unique_ID"))

# Visualize the correlation
# Species labels
labels_list <- c("M. laciniatus", "M. nasutus", "M. guttatus")
names(labels_list) <- c("L", "N", "G")

# Correlation ggplot
mantel_test <- ggplot(asv_geo_matrix_long |>
         filter(A < B, !Species == "B"), aes(y = bray_diss, x = geo_dist)) +
  geom_jitter(aes(color = Species), alpha = 0.7, size = 3) +
  geom_smooth(method = "lm", se = TRUE, color = "black") +
   #stat_regline_equation(label.y = 0.5, label.x = 1900, 
                          #aes(label = ..eq.label..), size = rel(4), color = "black") +
  #scale_fill_manual(labels = c("*M. laciniatus*","*M. nasutus*", "*M. guttatus*"), 
                     #values = met.brewer("Isfahan2", n = 4, type = "discrete", direction = c(1))) + 
   scale_color_manual("Species", labels = c("*M. laciniatus*", "*M. nasutus*", "*M. guttatus*"), 
                      values = met.brewer("Isfahan2", 
                                          n = 4, 
                                          type = "discrete", direction = c(-1))) + 
   labs(y = "Bray_Curtis dissimilarity", x = "Geographic distance", col = "") + 
   scale_x_continuous(labels = function(x) format(x, scientific = FALSE)) +
   theme_classic(base_size = 12) +
   theme(legend.title = element_text(face = "bold"),
        strip.text = element_text(face = "italic", size = 14),
        panel.border = element_rect(linetype = "blank", fill = NA),
        legend.text = element_markdown(size = 12), #Make legend text italic
        axis.text.x = element_text(size = 12),
        axis.title.x = element_text(size = 14)) 
  facet_wrap(~ Species, labeller = labeller(Species = labels_list)) 

mantel_test

#ggsave(file.path(path, "figures/mantel_test.png") , plot = mantel_test, dpi=300, units=c("mm"), width=200, height=150)

# Mantel test
# All data points
set.seed(859)
abund_geo  <- mantel(asv_vegdist, geo_distm, method = "spearman", permutations = 999, na.rm = TRUE)
#abund_geo

# Mantel test by species
# M. laciniatus
# Subset the data
lac_mantel  <- mantel(asv_long |> # Subset the data
                       filter(A %in% lac_names, B %in% lac_names) |>
                       pivot_wider(names_from = B, values_from = bray_diss) |>
                       column_to_rownames(var = "A") |>
                       as.matrix(),
                     geo_long |> # Subset the data
                       filter(A %in% lac_names, B %in% lac_names) |>
                       pivot_wider(names_from = B, values_from = geo_dist) |>
                       column_to_rownames(var = "A") |>
                       as.matrix(),
                      method = "spearman", permutations = 999, na.rm = TRUE)
lac_mantel

# M. nasutus
nas_mantel  <- mantel(asv_long |> # Subset the data
                       filter(A %in% nas_names, B %in% nas_names) |>
                       pivot_wider(names_from = B, values_from = bray_diss) |>
                       column_to_rownames(var = "A") |>
                       as.matrix(), 
                      geo_long |> # Subset the data
                       filter(A %in% nas_names, B %in% nas_names) |>
                       pivot_wider(names_from = B, values_from = geo_dist) |>
                       column_to_rownames(var = "A") |>
                       as.matrix(), 
                     method = "spearman", permutations = 999, na.rm = TRUE)
nas_mantel

# M. guttatus
# Subset the data
gut_mantel  <- mantel(asv_long |> # Subset the data
                       filter(A %in% gut_names, B %in% gut_names) |>
                       pivot_wider(names_from = B, values_from = bray_diss) |>
                       column_to_rownames(var = "A") |>
                       as.matrix(),
                     geo_long |> # Subset the data
                       filter(A %in% gut_names, B %in% gut_names) |>
                       pivot_wider(names_from = B, values_from = geo_dist) |>
                       column_to_rownames(var = "A") |>
                       as.matrix(),
                     method = "spearman", permutations = 999, na.rm = TRUE)
gut_mantel
```

The correlation plot for Bray-Curtis dissimilarity and geographical distance shows a positive correlation. The more distant two sites are, the more dissimilar their FEF communities are (bray = 1). The Mantel test shows a significant correlation between the two matrices (r = 0.054, p \< 0.02).

### Linear model

Regressions presented at Evo 2023.

```{r}
# Regressions
# Elevation_m and Thicknes
  
t <-ggplot(data = leaf_traits, aes(y= Thickness, x = Elevation_m, color = Species)) +
   geom_jitter(aes(color = Species,), size = 2, alpha = 0.5, na.rm = TRUE)+
#scale_shape_manual(values=c(1:24)) +
  scale_color_manual(values= met.brewer("Isfahan2", n = 4, type = "discrete"))+
  geom_smooth(method=lm, se = F) +
 # stat_regline_equation(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = "~~~~"))) +
  geom_smooth(method = lm, se = T , level = 0.95, na.rm = F, color = "black") +
  stat_regline_equation(label.y = 700, label.x = 6000, aes(label = ..eq.label..), sep = "~~~~", size = rel(3), color= "black") +
  stat_regline_equation(label.y = 650 , label.x = 6000, aes(label = ..adj.rr.label..), size = rel(3),color = "black") +
  labs(y="Leaf thickness (/u03BCm)", x = "Elevation_m (f.a.s.l.)") +
  theme_minimal(base_size = 10) +
  theme(legend.position="right", legend.title = element_blank(),
        legend.text = element_text(size = 8),
        axis.text.x=element_text(size = 7),
        axis.text.y=element_text(size = 7)) +
  guides(color = "none")  +      #To turn off color legend
  guides(fill = "none") + #To turn off fill legend
  guides(shape = "none") #To turn off shape legend
#caption = "**All replicate leaves from tree species included  (n = 210)", col = "Treatment"
t
```

```{r}
# fit <- lm(logit_herbivory ~ Thickness, data = masterant2)
# 
# rSquared <- summary(fit)$r.squared
# rSquared
# anova(fit)
# pVal <- anova(fit)$'Pr(>F)'[1]
# pVal

# Elevation_m and Anthocyanins

a <- ggplot(data = leaf_traits, aes(y= ACI, x= Elevation_m, color = Species))+
   geom_jitter(aes(color = Species), size = 2, alpha = 0.5) +
  #scale_shape_manual(values=c(15:22)) +
  scale_color_manual(values= met.brewer("Isfahan2", n = 4, type = "discrete")) +
  geom_smooth(method=lm, se=F) +
  #stat_regline_equation(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = "~~~~"))) +
  geom_smooth(method = lm, se = T , level = 0.95, na.rm = F, color = "black") +
  stat_regline_equation(label.y = 30, label.x = 6000, aes(label = ..eq.label..), size = rel(3), color= "black") +
  stat_regline_equation(label.y = 25 , label.x = 6000, aes(label = ..adj.rr.label..), size = rel(3), color = "black") +
  labs(y="Anthocyanins (ACI)", x="Elevation_m (f.a.s.l.)") +
  theme_minimal(base_size = 10) +
  theme(legend.position="right", legend.title =element_blank(),
        legend.text = element_text(size = 8),
        axis.text.x=element_text(size = 7),
        axis.text.y=element_text(size = 7)) +
  guides(color = "none")  +      #To turn off color legend
  guides(fill = "none") + #To turn off fill legend
  guides(shape = "none") #To turn off shape legend
 
a
#scale_shape_manual(values = c(1:7))
```

```{r}
# Herbivory and leaf thickness

tt <- ggplot(data = masterant2, aes(y= logit_herbivory, x= Thickness, color = E_load))+
   geom_jitter(aes(color = E_load, shape = Species), size = 1.5, alpha = 0.7) +
  scale_shape_manual(values=c(15:22)) +
  geom_smooth(method=lm, se=F) +
  #stat_regline_equation(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = "~~~~"))) +
  geom_smooth(method = lm, se = T , level = 0.95, na.rm = F, color = "black") +
  stat_regline_equation(label.y = 2.5, label.x = 200, aes(label = ..eq.label..), size = rel(3), color= "black") +
  stat_regline_equation(label.y = 2 , label.x = 200, aes(label = ..adj.rr.label..), size = rel(3), color = "black") +
  labs(x="Leaf thickness (/u03BCm)", y = "logit(Leaf herbivory) (%)") +
 theme_minimal(base_size = 10) +
  theme(legend.position="right", legend.title = element_blank(),
        legend.text = element_text(size = 8),
        axis.text.x=element_text(size = 7),
        axis.text.y=element_text(size = 7)) +
  guides(color = "none")  +      #To turn off color legend
  guides(fill = "none") + #To turn off fill legend
  guides(shape = "none")
tt

# Herbivory and LMA

lma <- ggplot(data = masterant2, aes(y= logit_herbivory, x= LMA, color = E_load))+
  geom_jitter(aes(color = E_load, shape = Species), size = 1.5, alpha = 0.7) +
  scale_shape_manual(values=c(15:22)) +
  geom_smooth(method=lm, se=F) +
  #stat_regline_equation(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = "~~~~"))) +
  geom_smooth(method = lm, se = T , level = 0.95, na.rm = F, color = "black") +
  stat_regline_equation(label.y = 2.5, label.x = 0.001, aes(label = ..eq.label..), size = rel(3), color= "black") +
  stat_regline_equation(label.y = 2 , label.x = 0.001, aes(label = ..adj.rr.label..), size = rel(3), color = "black") +
  labs(x="Leaf mass per area (LMA)", y = "logit(Leaf herbivory) (%)") +
  theme_minimal(base_size = 10) +
  theme(legend.position="right", legend.title = element_blank(),
        legend.text = element_text(size = 8),
        axis.text.x=element_text(size = 7),
        axis.text.y=element_text(size = 7)) +
  guides(color = "none")  +      #To turn off color legend
  guides(fill = "none") + #To turn off fill legend
  guides(shape = "none") #To turn off shape legend
 
lma

# Herbivory and FEF Shannon Diversity
# Extracting effect size of model to plot
 dv <- ggplot(data = masterant2, aes(y= logit_herbivory, x= Shannon, color = E_load))+
  geom_jitter(aes(color = E_load, color = Species), size = 1.5, alpha = 0.7) +
  scale_shape_manual(values=c(15:22)) +
  geom_smooth(method=lm, se=F) +
 # stat_regline_equation(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = "~~~~"))) +
  geom_smooth(method = lm, se = T , level = 0.95, na.rm = F, color = "black") +
  #scale_fill_manual(values= met.brewer("Cross", n = 8, type = "discrete")) +
  #scale_color_manual(values= met.brewer("Cross", n = 8, type = "discrete")) +
  stat_regline_equation(label.y = 2.5, label.x = 1.5, aes(label = ..eq.label..),size = rel(3), color= "black") +
  stat_regline_equation(label.y = 2 , label.x = 1.5, aes(label = ..adj.rr.label..), size = rel(3),color = "black") +
  labs(x="Shannon diversity index", y="logit(Leaf herbivory) (%)") +
  theme_minimal(base_size = 10) +
 theme(legend.position="right",
        legend.text = element_text(size = 12),
        axis.text.x=element_text(size = 7),
        axis.text.y=element_text(size = 7))
  # guides(color = "none")  +      #To turn off color legend
  # guides(fill = "none") + #To turn off fill legend
  # guides(shape = "none") #To turn off shape legend
 
 dv

 # Multiples plots together

ant_arranged <- ggarrange(t, tt, a, lma, dv, nrow = 2, ncol=3, common.legend = TRUE, legend="right")


# Adding caption
ant_caption <- "*All individuals per tree species included (n = 210)"
ant_arranged_with_caption <- annotate_figure(ant_arranged, bottom = text_grob(ant_caption), fig.lab.pos = "bottom.right", fig.lab.size = 6)

ant_arranged_with_caption

#ggsave(filename = "./Plots/Aim3_ant_regression_06042023.png", plot = ant_arranged_with_caption, dpi=600, units=c("mm"), width=180, height=140, bg = "white")

```

#### ASV barplot

```{r, asv_barplot}
# Just OTUs without singletons ps_clean_3
ps_melt <- psmelt(ps_clean_3)
plot_bar(ps_clean_3, x = "sample_Species", fill = "Phylum", facet_grid = "Elevation_cat")

hist(ps_melt$Abundance)

# Phylum level
p1 <- ggplot(ps_melt |>
  filter(!sample_Species == "B"), aes(x = sample_Species, y = Abundance)) +
  geom_bar(aes(fill = Phylum, color = Phylum), stat="identity", position = "fill") +
  scale_fill_manual(labels=c('Ascomycota', 'Basidiomycota', 'Chytridiomycota', 'Fungi_ord_Incertae_sedis', 'Mortierellomycota', 'Olpidiomycota'),values= met.brewer("Lakota", n = 6 , type = "discrete", override.order = TRUE)) +
  scale_color_manual(labels=c('Ascomycota', 'Basidiomycota', 'Chytridiomycota', 'Fungi_ord_Incertae_sedis', 'Mortierellomycota', 'Olpidiomycota'), values = met.brewer("Lakota", n = 6, type = "discrete", override.order = TRUE)) +
  theme_classic(base_size = 14) +
  theme(strip.background = element_rect(fill = "white"),
        strip.text.x = element_text(colour = "black", face = "bold"),
        legend.text = element_text(size = 12),
        panel.border = element_rect(linetype = "blank", fill = NA),
        axis.text.y = element_text(size = 12),
        axis.text.x = element_text(face="italic", 
                                    size = 10,  
                                    hjust = 1,
                                    angle = 30)) +
  scale_x_discrete(labels = c('M. laciniatus', 'M. nasutus', 'M. guttatus')) +
  labs(y = "Relative Abundance", x = "") +
  facet_grid(~Elevation_cat)

  
p1 
#ggsave(file.path(path, "figures/relabun_barplot.png") , plot = p1, dpi=300, units=c("mm"), width=200, height=150)


summarize_taxa(ps_clean_3, "Phylum")

library(dplyr)
tb <- ps_melt |>
  filter(!is.na(Phylum), !sample_Species == "B") %>%
  group_by(sample_Species, Elevation_cat, Phylum) %>%
  # Add abundances within each phylum and sample
  summarize_at("Abundance", sum) |>
  mutate(Proportion = mean(Abundance)) 
  # Get phylum proportions within each sample
  summarize_at("Abundance", ~ . / sum(.)) 
  # Get the mean proportion each phylum across samples within the `Sex` (Male/Female) variable
  mutate(Proportion = mean(Abundance)) 
  
  str(tb)
  ggplot(tb, aes(x = sample_Species, y = Proportion)) +
  geom_bar(aes(fill = Phylum, color = Phylum), stat="identity", position = "dodge") 
  geom_errorbar( aes(x=sample_Species, ymin=Proportion-sd(Proportion), ymax=Proportion+sd(Proportion)), width=0.4, colour="orange", alpha=0.9, size=1.3) +

  scale_fill_manual(values= met.brewer("Lakota", n = 6 , type = "discrete", override.order = TRUE)) 
  
  

test <- ggplot(ps_melt,
                aes(x = Phylum, y = mean_abundance, color = Phylum, fill = Phylum)) +
  geom_col(stat = "identity", position = "dodge") +
  geom_errorbar(aes(ymin = mean_abundance - se, ymax = mean_abundance + se), position = "dodge", color = "black")

# Uncomment the following line if you want to facet by sample_Species
# test + facet_grid(~sample_Species)

test

ps_melt <- ps_melt %>%
                 filter(!sample_Species == "B") %>%
                 group_by(Phylum, Elevation_cat) %>%
                 mutate(mean_abundance = mean(Abundance), 
                        se = sd(Abundance)/sqrt(length(Abundance)))

ggbarplot(ps_melt, x = "Phylum", y = "mean_abundance", 
  add = c("mean_se"),
  color= "sample_Species", 
  #color = "black",
  position = position_dodge(0.8),
  error.plot = "errorbar",
  ) + 
  geom_hline(yintercept = mean(ps_melt$mean_abundance), linetype = 2)+
  #stat_compare_means(method = "anova") +
  stat_compare_means(aes(group = "sample_Species"),label = "p.signif", method = "t.test",
                     #comparisons = list(c("N", "L"), c("N", "G"), c("L", "G")), 
                     hide.ns = TRUE)    
compare_means(mean_abundance ~ sample_Species,
         data = ps_melt,
         group.by = "Phylum",
         method = "wilcox.test",
         p.adjust.method = "BH",
  paired = FALSE,
  alternative = "two.sided", 
  mu = 0, 
  var.equal = FALSE,
  conf.level = 0.95)
species_list <- names(as.list(distinct(as.data.frame(ps_melt$sample_Species))))
```





### NMDS

```{r, NMDS}
#| echo: false
#| eval: true
#| tidy: true
#| 
set.seed(123)
#Ordination - NMDS with bray-curtis #########
x <- as.matrix(asv_vegdist)
#x <- replace(x, x == "NaN", 0)
x <- na.omit(x) #apparently there are some NAs in the matrix fro "Bray-Curtis"
# Choosing the number of dimensions
NMDS.scree <- function(x) { #where x is the name of the data frame variable
  plot(rep(1, 10), replicate(10, metaMDS(x, autotransform = F, k = 1)$stress), xlim = c(1, 10),ylim = c(0, 0.30), xlab = "# of Dimensions", ylab = "Stress", main = "NMDS stress plot")
  for (i in 1:10) {
    points(rep(i + 1,10),replicate(10, metaMDS(x, autotransform = F, k = i + 1)$stress))
  }
}

NMDS.scree(x) #4 dimension seem to be appropriate to keep the stress around 0.15. More dimension will complicate the interpretation of results.

NMDS <- metaMDS(x,
                distance = "bray",
                display = c("sites", "species"),
                noshare = TRUE,
                autotransform = FALSE,
                wascores = TRUE,
                tidy = TRUE,
                k = 2,trymax = 500)
stressplot(NMDS)


#Adding site scores to `NMDS`
sppscores(NMDS) <- t(asv_matrix) 

data.scores <- as_tibble(vegan::scores(NMDS)$sites)#Using the scores function from vegan to extract the site scores and convert to df for ggplot use.
# Solution found here: https://stackoverflow.com/questions/71941069/species-scores-not-available-as-result-of-metamds

# NMDS Aesthetics ####
#Subset data set for NMDS and dbRDA plot
nmds_traits <- plant_traits |>
  filter(Unique_ID %in% names_list)

 NMDS <- ggplot(data.scores, aes(NMDS1, NMDS2, color = nmds_traits$Species))+ 
  geom_point(data = data.scores,size = 3, alpha = 0.5, stroke = 1) +
  scale_shape_manual(values=c(1:24)) +
  # scale_color_manual(values = met.brewer(name = "Nizami", n = 8, type="discrete")) +
  geom_hline(yintercept = 0, colour = "grey50", linewidth = 0.65) +
  geom_vline(xintercept = 0, colour = "grey50", linewidth = 0.65) +
  theme_bw(base_size = 12) +
  theme(legend.position="right", legend.title = element_text(),
        legend.text = element_text(face = "italic")) +
  stat_ellipse(mapping = NULL, data = data.scores, geom = "path", size = 1.3,
position = "identity", type = "t", linetype = 1, level = 0.95, segments = 51,
na.rm = FALSE, show.legend = NA, inherit.aes = TRUE) 

NMDS
#ggsave(filename ="Aim3_NMDS_06272022.jpeg" , plot = NM.DS, dpi=600, units=c("mm"), width=200, height=200)
#
#
```

### dbRDA

##### Choosing traits for dbRDA model

```{r}
# Model with intercept only ####
m0 <- dbrda(asv_vegdist ~ 1, data = nmds_traits) #Model with intercept only.
m0
m0 <- na.omit(m0)
m1 <- dbrda(asv_vegdist ~ ., data = nmds_traits, na.action = na.omit) # Model with all explanatory variables.
m1

# Model with species, leaf traits and elevation. ####
m2 <- dbrda(asv_vegdist ~ logACI + logLT + logLPS + logLMA + logLBI + Elevation_m,  data = nmds_traits, na.action = na.omit)
m2
m2 <- na.omit(m2)
Anova(m2)

#Anovas for m2
anova(m2, by = "margin") 
anova(m2, by = "axis")
anova(m2, by = "axis", perm.max=500)
```

##### Forward and backward selection with ordistep - just leaf traits

```{r}
#Both, forward and backward selection. This way I can see the step by step.
#m3
m2.forsel <-  ordistep(m1, scope = formula(m2), Pin = 0.5, Pout = 0.05 ,trace = T, permutations = how(nperm = 999), steps = 50, direction = "forward")
#m2.forsel$anova # I used m2 as the "scope" because it does not contain Trial_type. This is a factor that is only relevant for the ant an pathogen trial. Differences detected between the trial types not important or unrealistic for the question at hand. 

#summary(m2.forsel)
#m2.forsel$anova
#anova(m2.forsel, by = "margin") # test for sign. environ. variables 
#anova(m2.forsel, by = "axis") # test axes for significance
#anova(m2.forsel, by="axis", perm.max=500) #tests for sign. variables, but adds them sequentially.

#m3 taking E_load out. Again not relevant. What I want to know is the influence the leaf traits have on the fungal community. 
m3.forsel <- ordistep(m0, scope = formula(m3), Pin = 0.5, Pout = 0.1, trace = T, pstep = 1000, direction = "forward")
#m3.forsel$terms
#summary(m3.forsel)

#anova(m3.forsel, by = "margin") 
#anova(m3.forsel, by = "axis")
#anova(m3.forsel, by="axis", perm.max=500) 

## Model 3 and 5 keep species and trial type as the most significant explanatory variables. Yes, the community composition will be different across spcies but this is due to the inherent leaf traits of each species. Not "species" itself. 
```

##### Plot dbRDA

```{r, m2dbRDA}
m2dbRDA <- dbrda(asv_vegdist ~ logACI + logLT + logLPS + logLMA + logLBI + Elevation_m, distance = "bray", data = nmds_traits, na.action = na.omit)

summary(m2dbRDA)
plot(m2dbRDA)
anova(m2dbRDA, by = "margin") 
anova(m2dbRDA, by = "axis")
#anova(m2.forsel, by="axis", perm.max=500)
#GRAPHING dbRDA - m4.forsel -- with color by continous leaf lifespan
#plot using ggplot2
names(m2dbRDA)
B <- summary(m2dbRDA)


# Extracting scores for the plot
A.1 <- vegan::scores(m2dbRDA)
A.2 <- as.data.frame(A.1$sites) #converting to df

# Extracting names for the plot
dbrda_names <- rownames(A.2)

# Row names to column
A.2 <- rownames_to_column(A.2, var = "Unique_ID")

# Subset for the plot
dbrda_df <- nmds_traits |>
  filter(Unique_ID %in% dbrda_names) 

A.3 <- right_join(A.2, dbrda_df, by = "Unique_ID") 
A.3 <- A.3 |>
  filter(!Species == "B")


#scores for arrows
A.4 <- data.frame(vegan::scores(m2dbRDA, display = "bp"))
A.4

# Define the arrow aesthetic mapping
arrow_map <- aes(xend = (dbRDA1*2), yend = (dbRDA2*2), x = 0, y = 0, shape = NULL, color = NULL, fill = NULL)
label_map <- aes(x = 2*dbRDA1, y = 2*dbRDA2, label = row.names(A.4), shape = NULL, color = NULL, fill = NULL)
arrowhead = arrow(length = unit(0.02, "npc"))

#subset A4 for labeling
A.4 <- A.4[sort(rownames(A.4)),]
A.4
A4.sub1 <- A.4[1,] #Elevation
A4.sub2 <- A.4[2,] #Anthocyanins
A4.sub3 <- A.4[3,] #LBI
A4.sub4 <- A.4[4,] #LMA
A4.sub5 <- A.4[5,] #LPS
A4.sub6 <- A.4[6,] #LT.

A.4
#A4.sub4

# dbRDA plot based on species
p_m2dbrda <- ggplot(data = A.3, aes(x = dbRDA1, y = dbRDA2)) +
  geom_point(data = A.3, aes(color = Species, shape = Species), size = rel(4), alpha = 0.7, stroke = 0.5) +
  geom_segment(arrow_map, size = rel(.8), data = A.4, color = "black", arrow = arrowhead) +
  geom_vline(xintercept = 0, color = "grey30", linetype = "dashed") + # plot vertical line
  geom_hline(yintercept = 0, color = "grey30", linetype = "dashed") + # plot horizontal line
  geom_text(label_map, size = rel(4), data = A4.sub1, fontface = "bold", show.legend = FALSE, label = c("Elv."), nudge_x = -0.1) +
  geom_text(label_map, size = rel(4), data = A4.sub2, fontface = "bold", show.legend = FALSE, label = c("logACI"), nudge_y = 0.1, nudge_x = -0.1) +
  geom_text(label_map, size = rel(4), data = A4.sub3, fontface = "bold", show.legend = FALSE, label = c("logLBI"), nudge_y = 0.1) +
  geom_text(label_map, size = rel(4), data = A4.sub4, fontface = "bold", show.legend = FALSE, label = c("logLMA"), nudge_y = 0.1, nudge_x = -0.1) +
  geom_text(label_map, size = rel(4), data = A4.sub5, fontface = "bold", show.legend = FALSE, label = c("logLPS"), nudge_y = 0.1, nudge_x = 0.2) +
  geom_text(label_map, size = rel(4), data = A4.sub6, fontface = "bold", show.legend = FALSE, label = c("logLT"), nudge_x = 0.2) +
  xlab(label = paste("dbRDA1 (", round(B$concont$importance[2,1]*100, digits = 1), "%)", sep="")) +
  ylab(label = paste("dbRDA2 (", round(B$concont$importance[2,2]*100, digits = 1), "%)", sep="")) + 
  scale_color_manual(labels=c('*M. laciniatus*', '*M. nasutus*', '*M. guttatus*'),
                    values= met.brewer("Isfahan2", n = 3 , type = "discrete", direction = -1)) +
  scale_shape_manual(values=c(15:18),labels=c('*M. laciniatus*', '*M. nasutus*', '*M. guttatus*')) +
  stat_ellipse(aes(color = Species), 
               geom = "path", 
               size = 1.7, 
               position = "identity",
               type = "t", linetype = 1,
               level = 0.95, 
               segments = 51,
               na.rm = FALSE, 
               show.legend = NA, inherit.aes = TRUE) +
  theme_classic(base_size = 16) +
  theme(legend.title = element_text(face = "bold"),
        legend.text = element_markdown()) 
  guides(color = FALSE, size = FALSE)
  labs(caption = "ACI = anthocyanins, LPS = leaf punch strength, LMA = leaf mass per area, LT = leaf thickness, LBI = leaf lobe index, Elv. = Elevation_m (f.a.s.l.)", hjust = 0)
     
# Rearranging the order of layers so arrows are above the points.
p_m2dbrda$layers
p_m2dbrda$layers <- c(p_m2dbrda$layers, p_m2dbrda$layers[[2]], p_m2dbrda$layers[[5]], p_m2dbrda$layers[[6]], p_m2dbrda$layers[[7]], p_m2dbrda$layers[[8]])
p_m2dbrda

#ggsave(filename=file.path(path, "figures/dbRDA_species.png"), plot = p_m2dbrda, dpi=600, units=c("mm"), width=150, height=150)
```

### PERMANOVA

```{r, adonis2}
set.seed(123)
perma <- adonis2(asv_vegdist ~ logACI + 
                   logLT + 
                   logLPS + 
                   logLMA + 
                   logLBI + 
                   Elevation_m,
                 data = nmds_traits,
permutation = 9999, method = "bray", na.action = na.omit, 
strata = NULL)
print(perma)
dfperma <- as.data.frame(perma)

fwrite(dfperma, file.path(path, "Plots", "/permanova.csv"))
```

### PERMDISP
Analysis of multivariate homogeneity of group dispersions.

```{r, PERMDISP}
set.seed(123)
# By Species
beta <- betadisper(as.dist(asv_vegdist), nmds_traits$Species, type = "centroid", sqrt.dist = FALSE)
beta
anova(beta)
permutest(beta, permutations = 9999)

plot(beta, hull=FALSE, ellipse=TRUE)
TukeyHSD(beta)
boxplot(beta, xlab = "", las = 2, cex.axis = 0.8)

# No significant differences in the dispersion of the fungal community across species.

# By Elevation
beta2 <- betadisper(as.dist(asv_vegdist), nmds_traits$Elevation_cat, type = "centroid", sqrt.dist = FALSE)
anova(beta2)
TukeyHSD(beta2)
boxplot(beta2, xlab = "", las = 2, cex.axis = 0.8)
plot(beta2, hull=FALSE, ellipse=TRUE)

# We see significant differences in the dispersion of the fungal community across elevation categories. 

```

Who contributes more to differneces in the community composition?

```{r, SIMPER}
(sim <- with(nmds_traits, simper(asv_vegdist, Elevation_cat, permutations = 999)))
summary(sim)
```

# Indicator species analysis

This analysis allows us to determine what endophytes are associated with particular groups (e.g. tree species). According to this vgnette from Cáceres ([2022](https://cran.r-project.org/web/packages/indicspecies/vignettes/IndicatorSpeciesAnalysis.html)) `multipatt` function can provides us with Indicators Value Index and correlation index. Both are similar, but the differences lies in the question they help answer. Indicator value index "\[...\]are used for assessing the predictive values of species as indicators of the conditions prevailing in site groups, e.g. for field determination of community types or ecological monitoring." While the correlation index can be used for "\[...\] determining the ecological preferences of species among a set of alternative site groups or site group combinations."


```{r, indicspp}

#Subset data frame for indicator species analysis
#Community Data

asv_matrix_df <- as.data.frame(t(asv_matrix))
asv_matrix_df <- asv_matrix|>
  t()|>
  as.data.frame() |>
  rownames_to_column(var = "Unique_ID") #This data set can also be created from ps_clean_3_df

asv_indicspp <- left_join(asv_matrix_df, nmds_traits, by = "Unique_ID") |># Joining to the NMDS traits data frame which has the same number of rows as the asv_matrix_df
    select(!c(237:255)) |>
  relocate(Species, Site, Elevation_cat, Elevation_m, .after = Unique_ID)
```


```{r indicspp}
#Making vector of groups for analysis
set.seed(123)
indiabun <- asv_indicspp[, 6:ncol(asv_indicspp)]

species <- asv_indicspp$Species
elecat <- asv_indicspp$Elevation_cat
site <- asv_indicspp$Site

# Indicator species analysis`
multipatt_analysis = multipatt(indiabun, species, func = "r.g", control = how(nperm=999)) #By using abundance data and not presence-absence we are calculating the "point biserial correlation coefficient"
multipatt_analysis
summary(multipatt_analysis, indvalcomp = TRUE)


# Indicator species analysis by elevation category
multipatt_analysis_ele <- multipatt(indiabun, elecat, func = "r.g", control = how(nperm=999))
multipatt_analysis_ele
summary(multipatt_analysis_ele, indvalcomp = TRUE)

```

```{r, Type I errror and data table, tidy = TRUE}
#Correcting for type 1 error and multiple comparisons
#code from this post
#https://stats.stackexchange.com/questions/370724/indiscpecies-multipatt-and-overcoming-multi-comparrisons/401277#401277

# By Mimulus Species
#Extract table of stats
multipatt_analysis_sign <- as.data.table(multipatt_analysis$sign, keep.rownames=TRUE)

# #Add adjusted p-value
multipatt_analysis_sign[, p.adj := p.adjust(p.value, method = "BH")] #This can also be calculated with `dplyr` and `tidyr`
# #indval.table <- indval.sign |>
#   #mutate(p.value.bh = p.adjust(p.value, method = "BH"))
 
# #Now we can select only the indicators with adjusted significant p-values
multipatt_analysis_sign <- multipatt_analysis_sign[p.adj <= 0.06,]

#Renaming the first column
colnames(multipatt_analysis_sign)[1]  <- "ASV" 

# By Elevation
#Extract table of stats
multipatt_analysis_elev_sign <- as.data.table(multipatt_analysis_ele$sign, keep.rownames=TRUE)

# #Add adjusted p-value
multipatt_analysis_elev_sign[, p.adj := p.adjust(p.value, method = "BH")] #This can also be calculated with `dplyr` and `tidyr`
# #indval.table <- indval.sign |>
#   #mutate(p.value.bh = p.adjust(p.value, method = "BH"))
 
# #Now we can select only the indicators with adjusted significant p-values
multipatt_analysis_elev_sign <- multipatt_analysis_elev_sign[p.adj <= 0.06,]

#Renaming the first column
colnames(multipatt_analysis_sign)[1]  <- "ASV" 
```

No ASVs significantly correlated with Mimulus species. When we test for correlations in elevation categories and adjust the p value for multiple comparison we are left with only 0 ASVs. 

NO evidence of a core ASV community associated with Mimulus or elevation types. 


```{r}


```

